From 8c23f58da0004e33e496dc864e842734fe17b00e Mon Sep 17 00:00:00 2001
From: Ethan Lee <flibitijibibo@gmail.com>
Date: Thu, 21 Nov 2019 11:37:17 -0500
Subject: [PATCH] Implement BaseVertex draw calls for Vulkan, OpenGL, NULL
 contexts.

This adds support for the following functions:

- glDrawElementsBaseVertex
- glDrawRangeElementsBaseVertex
- glDrawElementsInstancedBaseVertex

Bug: angleproject:3582
Bug: angleproject:3402
Change-Id: I83770f62e3a918c0965fd4ca8c7d9e598b8b4154
---
 .../GLES2/gl2ext_explicit_context_autogen.inc |  14 +
 .../GL_EGL_WGL_loader.json                    |   6 +-
 .../GL_EGL_entry_points.json                  |  44 +-
 .../GLenum_value_to_string_map.json           |   2 +-
 .../code_generation_hashes/proc_table.json    |   4 +-
 scripts/entry_point_packed_gl_enums.json      |  12 +
 scripts/registry_xml.py                       |   2 +
 src/libANGLE/Caps.cpp                         |   2 +
 src/libANGLE/Caps.h                           |  10 +
 src/libANGLE/Context.cpp                      |  45 +-
 src/libANGLE/Context_gl_3_2_autogen.h         |   3 -
 src/libANGLE/Context_gles_3_2_autogen.h       |  14 +-
 src/libANGLE/Context_gles_ext_autogen.h       |   5 +
 src/libANGLE/capture_gles_3_2_autogen.cpp     |  37 +-
 src/libANGLE/capture_gles_3_2_autogen.h       |  24 +-
 src/libANGLE/capture_gles_3_2_params.cpp      |  12 +-
 src/libANGLE/capture_gles_ext_autogen.cpp     | 204 +++++++
 src/libANGLE/capture_gles_ext_autogen.h       | 141 +++++
 src/libANGLE/capture_gles_ext_params.cpp      | 117 ++++
 src/libANGLE/entry_points_enum_autogen.cpp    |  14 +
 src/libANGLE/entry_points_enum_autogen.h      |   7 +
 src/libANGLE/frame_capture_replay_autogen.cpp |  27 +-
 src/libANGLE/renderer/ContextImpl.h           |  21 +
 src/libANGLE/renderer/d3d/d3d11/Context11.cpp |  39 ++
 src/libANGLE/renderer/d3d/d3d11/Context11.h   |  21 +
 src/libANGLE/renderer/d3d/d3d9/Context9.cpp   |  36 ++
 src/libANGLE/renderer/d3d/d3d9/Context9.h     |  21 +
 src/libANGLE/renderer/gl/ContextGL.cpp        |  83 +++
 src/libANGLE/renderer/gl/ContextGL.h          |  21 +
 src/libANGLE/renderer/gl/renderergl_utils.cpp |  10 +
 src/libANGLE/renderer/metal/ContextMtl.h      |  21 +
 src/libANGLE/renderer/metal/ContextMtl.mm     |  36 ++
 src/libANGLE/renderer/null/ContextNULL.cpp    |  33 ++
 src/libANGLE/renderer/null/ContextNULL.h      |  21 +
 src/libANGLE/renderer/vulkan/ContextVk.cpp    |  66 ++-
 src/libANGLE/renderer/vulkan/ContextVk.h      |  21 +
 .../vulkan/SecondaryCommandBuffer.cpp         |  21 +
 .../renderer/vulkan/SecondaryCommandBuffer.h  |  43 ++
 .../renderer/vulkan/vk_caps_utils.cpp         |   4 +
 src/libANGLE/renderer/vulkan/vk_helpers.cpp   |   4 +-
 src/libANGLE/renderer/vulkan/vk_helpers.h     |   2 +-
 src/libANGLE/renderer/vulkan/vk_wrapper.h     |  18 +
 src/libANGLE/validationES32.cpp               |  62 ++-
 src/libANGLE/validationES32_autogen.h         |  12 +-
 src/libANGLE/validationESEXT.cpp              | 169 ++++++
 src/libANGLE/validationESEXT_autogen.h        |  53 ++
 src/libGL/entry_points_gl_3_2_autogen.cpp     |  44 +-
 .../entry_points_gles_3_2_autogen.cpp         |  44 +-
 .../entry_points_gles_ext_autogen.cpp         | 508 +++++++++++++++++-
 src/libGLESv2/entry_points_gles_ext_autogen.h |  95 ++++
 src/libGLESv2/libGLESv2_autogen.cpp           | 156 ++++++
 src/libGLESv2/libGLESv2_autogen.def           |  18 +
 .../libGLESv2_no_capture_autogen.def          |  18 +
 .../libGLESv2_with_capture_autogen.def        |  18 +
 src/libGLESv2/proc_table_egl_autogen.cpp      |  21 +-
 util/gles_loader_autogen.cpp                  |  58 ++
 util/gles_loader_autogen.h                    |  23 +
 57 files changed, 2422 insertions(+), 165 deletions(-)

diff --git a/include/GLES2/gl2ext_explicit_context_autogen.inc b/include/GLES2/gl2ext_explicit_context_autogen.inc
index 75f663a00..1fe03d2f3 100644
--- a/include/GLES2/gl2ext_explicit_context_autogen.inc
+++ b/include/GLES2/gl2ext_explicit_context_autogen.inc
@@ -172,8 +172,14 @@ typedef void (GL_APIENTRYP PFNGLDISCARDFRAMEBUFFEREXTCONTEXTANGLEPROC)(GLeglCont
 typedef void (GL_APIENTRYP PFNGLDRAWARRAYSINSTANCEDANGLECONTEXTANGLEPROC)(GLeglContext ctx, GLenum mode, GLint first, GLsizei count, GLsizei primcount);
 typedef void (GL_APIENTRYP PFNGLDRAWARRAYSINSTANCEDEXTCONTEXTANGLEPROC)(GLeglContext ctx, GLenum mode, GLint start, GLsizei count, GLsizei primcount);
 typedef void (GL_APIENTRYP PFNGLDRAWBUFFERSEXTCONTEXTANGLEPROC)(GLeglContext ctx, GLsizei n, const GLenum *bufs);
+typedef void (GL_APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXEXTCONTEXTANGLEPROC)(GLeglContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
+typedef void (GL_APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXOESCONTEXTANGLEPROC)(GLeglContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
 typedef void (GL_APIENTRYP PFNGLDRAWELEMENTSINSTANCEDANGLECONTEXTANGLEPROC)(GLeglContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
+typedef void (GL_APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTCONTEXTANGLEPROC)(GLeglContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
+typedef void (GL_APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESCONTEXTANGLEPROC)(GLeglContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
 typedef void (GL_APIENTRYP PFNGLDRAWELEMENTSINSTANCEDEXTCONTEXTANGLEPROC)(GLeglContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
+typedef void (GL_APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTCONTEXTANGLEPROC)(GLeglContext ctx, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
+typedef void (GL_APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXOESCONTEXTANGLEPROC)(GLeglContext ctx, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
 typedef void (GL_APIENTRYP PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESCONTEXTANGLEPROC)(GLeglContext ctx, GLenum target, GLeglImageOES image);
 typedef void (GL_APIENTRYP PFNGLEGLIMAGETARGETTEXTURE2DOESCONTEXTANGLEPROC)(GLeglContext ctx, GLenum target, GLeglImageOES image);
 typedef void (GL_APIENTRYP PFNGLENDQUERYEXTCONTEXTANGLEPROC)(GLeglContext ctx, GLenum target);
@@ -225,6 +231,7 @@ typedef void *(GL_APIENTRYP PFNGLMAPBUFFEROESCONTEXTANGLEPROC)(GLeglContext ctx,
 typedef void *(GL_APIENTRYP PFNGLMAPBUFFERRANGEEXTCONTEXTANGLEPROC)(GLeglContext ctx, GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
 typedef void (GL_APIENTRYP PFNGLMAXSHADERCOMPILERTHREADSKHRCONTEXTANGLEPROC)(GLeglContext ctx, GLuint count);
 typedef void (GL_APIENTRYP PFNGLMEMORYOBJECTPARAMETERIVEXTCONTEXTANGLEPROC)(GLeglContext ctx, GLuint memoryObject, GLenum pname, const GLint *params);
+typedef void (GL_APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTCONTEXTANGLEPROC)(GLeglContext ctx, GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, const GLint *basevertex);
 typedef void (GL_APIENTRYP PFNGLOBJECTLABELKHRCONTEXTANGLEPROC)(GLeglContext ctx, GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
 typedef void (GL_APIENTRYP PFNGLOBJECTPTRLABELKHRCONTEXTANGLEPROC)(GLeglContext ctx, const void *ptr, GLsizei length, const GLchar *label);
 typedef void (GL_APIENTRYP PFNGLPOPDEBUGGROUPKHRCONTEXTANGLEPROC)(GLeglContext ctx);
@@ -540,8 +547,14 @@ GL_APICALL void GL_APIENTRY glDiscardFramebufferEXTContextANGLE(GLeglContext ctx
 GL_APICALL void GL_APIENTRY glDrawArraysInstancedANGLEContextANGLE(GLeglContext ctx, GLenum mode, GLint first, GLsizei count, GLsizei primcount);
 GL_APICALL void GL_APIENTRY glDrawArraysInstancedEXTContextANGLE(GLeglContext ctx, GLenum mode, GLint start, GLsizei count, GLsizei primcount);
 GL_APICALL void GL_APIENTRY glDrawBuffersEXTContextANGLE(GLeglContext ctx, GLsizei n, const GLenum *bufs);
+GL_APICALL void GL_APIENTRY glDrawElementsBaseVertexEXTContextANGLE(GLeglContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
+GL_APICALL void GL_APIENTRY glDrawElementsBaseVertexOESContextANGLE(GLeglContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
 GL_APICALL void GL_APIENTRY glDrawElementsInstancedANGLEContextANGLE(GLeglContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
+GL_APICALL void GL_APIENTRY glDrawElementsInstancedBaseVertexEXTContextANGLE(GLeglContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
+GL_APICALL void GL_APIENTRY glDrawElementsInstancedBaseVertexOESContextANGLE(GLeglContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
 GL_APICALL void GL_APIENTRY glDrawElementsInstancedEXTContextANGLE(GLeglContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
+GL_APICALL void GL_APIENTRY glDrawRangeElementsBaseVertexEXTContextANGLE(GLeglContext ctx, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
+GL_APICALL void GL_APIENTRY glDrawRangeElementsBaseVertexOESContextANGLE(GLeglContext ctx, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
 GL_APICALL void GL_APIENTRY glEGLImageTargetRenderbufferStorageOESContextANGLE(GLeglContext ctx, GLenum target, GLeglImageOES image);
 GL_APICALL void GL_APIENTRY glEGLImageTargetTexture2DOESContextANGLE(GLeglContext ctx, GLenum target, GLeglImageOES image);
 GL_APICALL void GL_APIENTRY glEndQueryEXTContextANGLE(GLeglContext ctx, GLenum target);
@@ -593,6 +606,7 @@ GL_APICALL void *GL_APIENTRY glMapBufferOESContextANGLE(GLeglContext ctx, GLenum
 GL_APICALL void *GL_APIENTRY glMapBufferRangeEXTContextANGLE(GLeglContext ctx, GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
 GL_APICALL void GL_APIENTRY glMaxShaderCompilerThreadsKHRContextANGLE(GLeglContext ctx, GLuint count);
 GL_APICALL void GL_APIENTRY glMemoryObjectParameterivEXTContextANGLE(GLeglContext ctx, GLuint memoryObject, GLenum pname, const GLint *params);
+GL_APICALL void GL_APIENTRY glMultiDrawElementsBaseVertexEXTContextANGLE(GLeglContext ctx, GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, const GLint *basevertex);
 GL_APICALL void GL_APIENTRY glObjectLabelKHRContextANGLE(GLeglContext ctx, GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
 GL_APICALL void GL_APIENTRY glObjectPtrLabelKHRContextANGLE(GLeglContext ctx, const void *ptr, GLsizei length, const GLchar *label);
 GL_APICALL void GL_APIENTRY glPopDebugGroupKHRContextANGLE(GLeglContext ctx);
diff --git a/scripts/code_generation_hashes/GL_EGL_WGL_loader.json b/scripts/code_generation_hashes/GL_EGL_WGL_loader.json
index b810ea024..917d48df9 100644
--- a/scripts/code_generation_hashes/GL_EGL_WGL_loader.json
+++ b/scripts/code_generation_hashes/GL_EGL_WGL_loader.json
@@ -6,7 +6,7 @@
   "scripts/generate_loader.py":
     "48c60c668bec42a80378179aae2acc61",
   "scripts/registry_xml.py":
-    "f5fe888247ca4da9df81266a0123f7de",
+    "4f1fdc6158306914b149ade7549ad30a",
   "scripts/wgl.xml":
     "aa96419c582af2f6673430e2847693f4",
   "src/libEGL/egl_loader_autogen.cpp":
@@ -18,9 +18,9 @@
   "util/egl_loader_autogen.h":
     "6349dd7847bd72466919816befb6841d",
   "util/gles_loader_autogen.cpp":
-    "8f5e1cd93093e54d3287609680cae33c",
+    "c3025da071517953912c174680e65962",
   "util/gles_loader_autogen.h":
-    "5d349366c734f6f7a9cce58714fef1df",
+    "f26590cfa63a665d94b180ebd0748d21",
   "util/windows/wgl_loader_autogen.cpp":
     "12ffb44e5e743c826e4d84ac65cdba82",
   "util/windows/wgl_loader_autogen.h":
diff --git a/scripts/code_generation_hashes/GL_EGL_entry_points.json b/scripts/code_generation_hashes/GL_EGL_entry_points.json
index 3927f7cda..423498fa2 100644
--- a/scripts/code_generation_hashes/GL_EGL_entry_points.json
+++ b/scripts/code_generation_hashes/GL_EGL_entry_points.json
@@ -4,7 +4,7 @@
   "scripts/egl_angle_ext.xml":
     "24d4348e6c064b6837f46c955cc219a8",
   "scripts/entry_point_packed_gl_enums.json":
-    "3b72a1d43df45cf53784b2a0002b93e5",
+    "96c56ee7b7ce2f485e5822e6cf300888",
   "scripts/generate_entry_points.py":
     "36f89f5514fff27ecb4baeded89ae64d",
   "scripts/gl.xml":
@@ -12,7 +12,7 @@
   "scripts/gl_angle_ext.xml":
     "d6907cd84d95ac0b32a164194eadcf53",
   "scripts/registry_xml.py":
-    "f5fe888247ca4da9df81266a0123f7de",
+    "4f1fdc6158306914b149ade7549ad30a",
   "scripts/wgl.xml":
     "aa96419c582af2f6673430e2847693f4",
   "src/libANGLE/Context_gl_1_0_autogen.h":
@@ -36,7 +36,7 @@
   "src/libANGLE/Context_gl_3_1_autogen.h":
     "1a35b7ccc5288d1f3a455152a6cc2e2c",
   "src/libANGLE/Context_gl_3_2_autogen.h":
-    "d956c7353be50a046b33928b347880a8",
+    "75726a2093163c9e9635e0b12df0f8f9",
   "src/libANGLE/Context_gl_3_3_autogen.h":
     "b7b4c2cb4ed98e35b176dca69fdb99e0",
   "src/libANGLE/Context_gl_4_0_autogen.h":
@@ -62,9 +62,9 @@
   "src/libANGLE/Context_gles_3_1_autogen.h":
     "8aef8ceb87eed9cc7e9586f6c98796e3",
   "src/libANGLE/Context_gles_3_2_autogen.h":
-    "72bf9e9e488c16ddfaf700afa3335d60",
+    "022bf1da90cc56f2e52998b87d274e64",
   "src/libANGLE/Context_gles_ext_autogen.h":
-    "4a24e91315986187921051585d04f66f",
+    "d0d3146d3fc6334244416c0cd195de74",
   "src/libANGLE/capture_gles_1_0_autogen.cpp":
     "01eb0a76c176e5cdba3102cae58334af",
   "src/libANGLE/capture_gles_1_0_autogen.h":
@@ -82,19 +82,19 @@
   "src/libANGLE/capture_gles_3_1_autogen.h":
     "1739a558c3e77bef37d9fa710eb78932",
   "src/libANGLE/capture_gles_3_2_autogen.cpp":
-    "f74e229e52cc19b0678207e6204b563d",
+    "88cb88100c1f910254f0934359ba456e",
   "src/libANGLE/capture_gles_3_2_autogen.h":
-    "8d96d227765ee9b0d7b532edcc9f3bf1",
+    "fd5e95c49bb708635e5226f963a71eb5",
   "src/libANGLE/capture_gles_ext_autogen.cpp":
-    "3bd6fcda980f381cbbad2956b896afd9",
+    "fa8e244fd401d5cb84ede782848c765e",
   "src/libANGLE/capture_gles_ext_autogen.h":
-    "2626f039751578bd51c1cbbc1e233f5d",
+    "975d832dbc92401e2bf2d52b397c6884",
   "src/libANGLE/entry_points_enum_autogen.cpp":
-    "6f259507f339880bf81920738e82e688",
+    "552afb6f0ec70ff4f848fec13d676531",
   "src/libANGLE/entry_points_enum_autogen.h":
-    "3be0bc6eaae7fe2dd4f491213e5c9c81",
+    "f8c1025b36be5451fb423ccec37e1c0f",
   "src/libANGLE/frame_capture_replay_autogen.cpp":
-    "48b7051879562ab15c83e4de7af8c75d",
+    "f9cd2ab7361870ec1889c61355f706fc",
   "src/libANGLE/frame_capture_utils_autogen.cpp":
     "f0a704d60de3f1f175a7799b49c45408",
   "src/libANGLE/frame_capture_utils_autogen.h":
@@ -106,11 +106,11 @@
   "src/libANGLE/validationES31_autogen.h":
     "9bf34098be328bee8f9fc04d1afbdfde",
   "src/libANGLE/validationES32_autogen.h":
-    "54ddf9c7d7d8071a33264e40353e00c6",
+    "4892ff4d6de709fe7f36ab49bf304b41",
   "src/libANGLE/validationES3_autogen.h":
     "1b470a8e190aa007f093f1f13f3b1a8c",
   "src/libANGLE/validationESEXT_autogen.h":
-    "eeabee2f488207f70931f2e3a2ff9c55",
+    "a2f1e484172c6ee44c965e71a597f847",
   "src/libANGLE/validationGL11_autogen.h":
     "c5ac1ca523a39df2621d11e92c9c821a",
   "src/libANGLE/validationGL12_autogen.h":
@@ -190,7 +190,7 @@
   "src/libGL/entry_points_gl_3_1_autogen.h":
     "6ee6613c0206d99c6afdcd3faddb52a3",
   "src/libGL/entry_points_gl_3_2_autogen.cpp":
-    "85c8dad28022855d4b08189abd0c45f9",
+    "d36d26e96cc912c74b82bbcb3125c753",
   "src/libGL/entry_points_gl_3_2_autogen.h":
     "347e40b5c9fd08a693bf4ffe713c61e6",
   "src/libGL/entry_points_gl_3_3_autogen.cpp":
@@ -246,19 +246,19 @@
   "src/libGLESv2/entry_points_gles_3_1_autogen.h":
     "043d09a964c740067bf4279e0b544aed",
   "src/libGLESv2/entry_points_gles_3_2_autogen.cpp":
-    "09693d9b4cd5f015ee1b1bd46a2a0e0a",
+    "b894d2b9b3024e69685ea430764f3962",
   "src/libGLESv2/entry_points_gles_3_2_autogen.h":
     "e06eb4df7dc6fb29c5fd632a54b0b162",
   "src/libGLESv2/entry_points_gles_ext_autogen.cpp":
-    "760cbaad5c626c1b27d579d6ca1b0049",
+    "a584f13bc832a80b57b4ff685bbf58d3",
   "src/libGLESv2/entry_points_gles_ext_autogen.h":
-    "a8dad3044b98f7988207a65987836143",
+    "62b5f609fd34c47b0b1aa9e757b0f180",
   "src/libGLESv2/libGLESv2_autogen.cpp":
-    "7b0682a27fa050660b54ae73063f3b2d",
+    "9e7ff9ce5120295b9e61135ee01bc008",
   "src/libGLESv2/libGLESv2_autogen.def":
-    "cfa8370ea276c98b9bb3752bf75cb5d8",
+    "fb94a511a505ed79461b1677a185d301",
   "src/libGLESv2/libGLESv2_no_capture_autogen.def":
-    "a932f323fa7cfc13b4099f1741b5dc65",
+    "d9222e76f0b5ecc824bd82c975dec7ee",
   "src/libGLESv2/libGLESv2_with_capture_autogen.def":
-    "bd52aea6901faff81f0b0cb5f706528b"
+    "782e85c5bb72eebc8651fbcf86e0059d"
 }
\ No newline at end of file
diff --git a/scripts/code_generation_hashes/GLenum_value_to_string_map.json b/scripts/code_generation_hashes/GLenum_value_to_string_map.json
index 640edd5f7..a547ee83b 100644
--- a/scripts/code_generation_hashes/GLenum_value_to_string_map.json
+++ b/scripts/code_generation_hashes/GLenum_value_to_string_map.json
@@ -6,7 +6,7 @@
   "scripts/gl_angle_ext.xml":
     "d6907cd84d95ac0b32a164194eadcf53",
   "scripts/registry_xml.py":
-    "f5fe888247ca4da9df81266a0123f7de",
+    "4f1fdc6158306914b149ade7549ad30a",
   "src/libANGLE/gl_enum_utils_autogen.cpp":
     "3178466fb9ef26a3349fe59a76295dc3",
   "src/libANGLE/gl_enum_utils_autogen.h":
diff --git a/scripts/code_generation_hashes/proc_table.json b/scripts/code_generation_hashes/proc_table.json
index d3a453173..7c5c78b01 100644
--- a/scripts/code_generation_hashes/proc_table.json
+++ b/scripts/code_generation_hashes/proc_table.json
@@ -10,11 +10,11 @@
   "scripts/gl_angle_ext.xml":
     "d6907cd84d95ac0b32a164194eadcf53",
   "scripts/registry_xml.py":
-    "f5fe888247ca4da9df81266a0123f7de",
+    "4f1fdc6158306914b149ade7549ad30a",
   "scripts/wgl.xml":
     "aa96419c582af2f6673430e2847693f4",
   "src/libGL/proc_table_wgl_autogen.cpp":
     "6844abf06aa6fb7a26878acb0d69df07",
   "src/libGLESv2/proc_table_egl_autogen.cpp":
-    "24f519e153ade8e0fdc3bff3ae05954d"
+    "9436c346cf67f3fea38ee2654dd43bf8"
 }
\ No newline at end of file
diff --git a/scripts/entry_point_packed_gl_enums.json b/scripts/entry_point_packed_gl_enums.json
index 1761267ab..19f16e85e 100644
--- a/scripts/entry_point_packed_gl_enums.json
+++ b/scripts/entry_point_packed_gl_enums.json
@@ -333,6 +333,10 @@
         "mode": "PrimitiveMode",
         "type": "DrawElementsType"
     },
+    "glDrawElementsBaseVertex": {
+        "mode": "PrimitiveMode",
+        "type": "DrawElementsType"
+    },
     "glDrawElementsIndirect": {
         "mode": "PrimitiveMode",
         "type": "DrawElementsType"
@@ -341,6 +345,10 @@
         "mode": "PrimitiveMode",
         "type": "DrawElementsType"
     },
+    "glDrawElementsInstancedBaseVertex": {
+        "mode": "PrimitiveMode",
+        "type": "DrawElementsType"
+    },
     "glDrawElementsInstancedBaseVertexBaseInstance": {
         "mode": "PrimitiveMode",
         "type": "DrawElementsType"
@@ -349,6 +357,10 @@
         "mode": "PrimitiveMode",
         "type": "DrawElementsType"
     },
+    "glDrawRangeElementsBaseVertex": {
+        "mode": "PrimitiveMode",
+        "type": "DrawElementsType"
+    },
     "glDrawTransformFeedback": {
         "id": "TransformFeedbackID"
     },
diff --git a/scripts/registry_xml.py b/scripts/registry_xml.py
index f093a692c..3b967e448 100644
--- a/scripts/registry_xml.py
+++ b/scripts/registry_xml.py
@@ -64,6 +64,7 @@ gles_extensions = [
     "GL_EXT_discard_framebuffer",
     "GL_EXT_disjoint_timer_query",
     "GL_EXT_draw_buffers",
+    "GL_EXT_draw_elements_base_vertex",
     "GL_EXT_geometry_shader",
     "GL_EXT_instanced_arrays",
     "GL_EXT_map_buffer_range",
@@ -80,6 +81,7 @@ gles_extensions = [
     "GL_KHR_parallel_shader_compile",
     "GL_NV_fence",
     "GL_OES_EGL_image",
+    "GL_OES_draw_elements_base_vertex",
     "GL_OES_get_program_binary",
     "GL_OES_mapbuffer",
     "GL_OES_texture_3D",
diff --git a/src/libANGLE/Caps.cpp b/src/libANGLE/Caps.cpp
index d72a6f499..6dfda91a4 100644
--- a/src/libANGLE/Caps.cpp
+++ b/src/libANGLE/Caps.cpp
@@ -897,6 +897,8 @@ const ExtensionInfoMap &GetExtensionInfoMap()
         map["GL_ANGLE_texture_external_update"] = enableableExtension(&Extensions::textureExternalUpdateANGLE);
         map["GL_ANGLE_base_vertex_base_instance"] = enableableExtension(&Extensions::baseVertexBaseInstance);
         map["GL_ANGLE_get_image"] = enableableExtension(&Extensions::getImageANGLE);
+        map["GL_OES_draw_elements_base_vertex"] = enableableExtension(&Extensions::drawElementsBaseVertexOES);
+        map["GL_EXT_draw_elements_base_vertex"] = enableableExtension(&Extensions::drawElementsBaseVertexEXT);
         // GLES1 extensinos
         map["GL_OES_point_size_array"] = enableableExtension(&Extensions::pointSizeArray);
         map["GL_OES_texture_cube_map"] = enableableExtension(&Extensions::textureCubeMap);
diff --git a/src/libANGLE/Caps.h b/src/libANGLE/Caps.h
index f16a1f41a..d21d05262 100644
--- a/src/libANGLE/Caps.h
+++ b/src/libANGLE/Caps.h
@@ -544,6 +544,16 @@ struct Extensions
 
     // GL_ANGLE_get_image
     bool getImageANGLE = false;
+
+    // GL_OES_draw_elements_base_vertex
+    bool drawElementsBaseVertexOES = false;
+    // GL_EXT_draw_elements_base_vertex
+    bool drawElementsBaseVertexEXT = false;
+    // Any version of the base vertex extension
+    bool drawElementsBaseVertexAny() const
+    {
+        return (drawElementsBaseVertexOES || drawElementsBaseVertexEXT);
+    }
 };
 
 // Pointer to a boolean memeber of the Extensions struct
diff --git a/src/libANGLE/Context.cpp b/src/libANGLE/Context.cpp
index e254a3789..90e80d92b 100644
--- a/src/libANGLE/Context.cpp
+++ b/src/libANGLE/Context.cpp
@@ -2299,23 +2299,41 @@ void Context::drawElementsInstanced(PrimitiveMode mode,
     MarkShaderStorageBufferUsage(this);
 }
 
-void Context::drawElementsBaseVertex(GLenum mode,
+void Context::drawElementsBaseVertex(PrimitiveMode mode,
                                      GLsizei count,
-                                     GLenum type,
+                                     DrawElementsType type,
                                      const void *indices,
                                      GLint basevertex)
 {
-    UNIMPLEMENTED();
+    // No-op if count draws no primitives for given mode
+    if (noopDraw(mode, count))
+    {
+        return;
+    }
+
+    ANGLE_CONTEXT_TRY(prepareForDraw(mode));
+    ANGLE_CONTEXT_TRY(
+        mImplementation->drawElementsBaseVertex(this, mode, count, type, indices, basevertex));
+    MarkShaderStorageBufferUsage(this);
 }
 
-void Context::drawElementsInstancedBaseVertex(GLenum mode,
+void Context::drawElementsInstancedBaseVertex(PrimitiveMode mode,
                                               GLsizei count,
-                                              GLenum type,
+                                              DrawElementsType type,
                                               const void *indices,
                                               GLsizei instancecount,
                                               GLint basevertex)
 {
-    UNIMPLEMENTED();
+    // No-op if count draws no primitives for given mode
+    if (noopDrawInstanced(mode, count, instancecount))
+    {
+        return;
+    }
+
+    ANGLE_CONTEXT_TRY(prepareForDraw(mode));
+    ANGLE_CONTEXT_TRY(mImplementation->drawElementsInstancedBaseVertex(
+        this, mode, count, type, indices, instancecount, basevertex));
+    MarkShaderStorageBufferUsage(this);
 }
 
 void Context::drawRangeElements(PrimitiveMode mode,
@@ -2337,15 +2355,24 @@ void Context::drawRangeElements(PrimitiveMode mode,
     MarkShaderStorageBufferUsage(this);
 }
 
-void Context::drawRangeElementsBaseVertex(GLenum mode,
+void Context::drawRangeElementsBaseVertex(PrimitiveMode mode,
                                           GLuint start,
                                           GLuint end,
                                           GLsizei count,
-                                          GLenum type,
+                                          DrawElementsType type,
                                           const void *indices,
                                           GLint basevertex)
 {
-    UNIMPLEMENTED();
+    // No-op if count draws no primitives for given mode
+    if (noopDraw(mode, count))
+    {
+        return;
+    }
+
+    ANGLE_CONTEXT_TRY(prepareForDraw(mode));
+    ANGLE_CONTEXT_TRY(mImplementation->drawRangeElementsBaseVertex(this, mode, start, end, count,
+                                                                   type, indices, basevertex));
+    MarkShaderStorageBufferUsage(this);
 }
 
 void Context::drawArraysIndirect(PrimitiveMode mode, const void *indirect)
diff --git a/src/libANGLE/Context_gl_3_2_autogen.h b/src/libANGLE/Context_gl_3_2_autogen.h
index 4ee6e3546..bfa7ef39d 100644
--- a/src/libANGLE/Context_gl_3_2_autogen.h
+++ b/src/libANGLE/Context_gl_3_2_autogen.h
@@ -11,9 +11,6 @@
 #define ANGLE_CONTEXT_GL_3_2_AUTOGEN_H_
 
 #define ANGLE_GL_3_2_CONTEXT_API                                                               \
-    void multiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type,           \
-                                     const void *const *indices, GLsizei drawcount,            \
-                                     const GLint *basevertex);                                 \
     void texImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat,          \
                                GLsizei width, GLsizei height, GLboolean fixedsamplelocations); \
     void texImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat,          \
diff --git a/src/libANGLE/Context_gles_3_2_autogen.h b/src/libANGLE/Context_gles_3_2_autogen.h
index 1ef85a632..2e31634ab 100644
--- a/src/libANGLE/Context_gles_3_2_autogen.h
+++ b/src/libANGLE/Context_gles_3_2_autogen.h
@@ -28,13 +28,15 @@
     void debugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity,                \
                             GLsizei length, const GLchar *buf);                                    \
     void disablei(GLenum target, GLuint index);                                                    \
-    void drawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices,      \
+    void drawElementsBaseVertex(PrimitiveMode modePacked, GLsizei count,                           \
+                                DrawElementsType typePacked, const void *indices,                  \
                                 GLint basevertex);                                                 \
-    void drawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type,                  \
-                                         const void *indices, GLsizei instancecount,               \
-                                         GLint basevertex);                                        \
-    void drawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count,         \
-                                     GLenum type, const void *indices, GLint basevertex);          \
+    void drawElementsInstancedBaseVertex(PrimitiveMode modePacked, GLsizei count,                  \
+                                         DrawElementsType typePacked, const void *indices,         \
+                                         GLsizei instancecount, GLint basevertex);                 \
+    void drawRangeElementsBaseVertex(PrimitiveMode modePacked, GLuint start, GLuint end,           \
+                                     GLsizei count, DrawElementsType typePacked,                   \
+                                     const void *indices, GLint basevertex);                       \
     void enablei(GLenum target, GLuint index);                                                     \
     void framebufferTexture(GLenum target, GLenum attachment, TextureID texturePacked,             \
                             GLint level);                                                          \
diff --git a/src/libANGLE/Context_gles_ext_autogen.h b/src/libANGLE/Context_gles_ext_autogen.h
index c071f0c9b..0439ed8a4 100644
--- a/src/libANGLE/Context_gles_ext_autogen.h
+++ b/src/libANGLE/Context_gles_ext_autogen.h
@@ -329,6 +329,10 @@
     void getQueryObjectui64v(QueryID idPacked, GLenum pname, GLuint64 *params);                    \
     void queryCounter(QueryID idPacked, QueryType targetPacked);                                   \
     /* GL_EXT_draw_buffers */                                                                      \
+    /* GL_EXT_draw_elements_base_vertex */                                                         \
+    void multiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type,               \
+                                     const void *const *indices, GLsizei primcount,                \
+                                     const GLint *basevertex);                                     \
     /* GL_EXT_geometry_shader */                                                                   \
     /* GL_EXT_instanced_arrays */                                                                  \
     /* GL_EXT_map_buffer_range */                                                                  \
@@ -398,6 +402,7 @@
     /* GL_OES_EGL_image */                                                                         \
     void eGLImageTargetRenderbufferStorage(GLenum target, GLeglImageOES image);                    \
     void eGLImageTargetTexture2D(TextureType targetPacked, GLeglImageOES image);                   \
+    /* GL_OES_draw_elements_base_vertex */                                                         \
     /* GL_OES_get_program_binary */                                                                \
     /* GL_OES_mapbuffer */                                                                         \
     void *mapBuffer(BufferBinding targetPacked, GLenum access);                                    \
diff --git a/src/libANGLE/capture_gles_3_2_autogen.cpp b/src/libANGLE/capture_gles_3_2_autogen.cpp
index 2a096ac11..cc7fb7f47 100644
--- a/src/libANGLE/capture_gles_3_2_autogen.cpp
+++ b/src/libANGLE/capture_gles_3_2_autogen.cpp
@@ -231,22 +231,22 @@ CallCapture CaptureDisablei(const State &glState, bool isCallValid, GLenum targe
 
 CallCapture CaptureDrawElementsBaseVertex(const State &glState,
                                           bool isCallValid,
-                                          GLenum mode,
+                                          PrimitiveMode modePacked,
                                           GLsizei count,
-                                          GLenum type,
+                                          DrawElementsType typePacked,
                                           const void *indices,
                                           GLint basevertex)
 {
     ParamBuffer paramBuffer;
 
-    paramBuffer.addEnumParam("mode", GLenumGroup::PrimitiveType, ParamType::TGLenum, mode);
+    paramBuffer.addValueParam("modePacked", ParamType::TPrimitiveMode, modePacked);
     paramBuffer.addValueParam("count", ParamType::TGLsizei, count);
-    paramBuffer.addEnumParam("type", GLenumGroup::DrawElementsType, ParamType::TGLenum, type);
+    paramBuffer.addValueParam("typePacked", ParamType::TDrawElementsType, typePacked);
 
     ParamCapture indicesParam("indices", ParamType::TvoidConstPointer);
     InitParamValue(ParamType::TvoidConstPointer, indices, &indicesParam.value);
-    CaptureDrawElementsBaseVertex_indices(glState, isCallValid, mode, count, type, indices,
-                                          basevertex, &indicesParam);
+    CaptureDrawElementsBaseVertex_indices(glState, isCallValid, modePacked, count, typePacked,
+                                          indices, basevertex, &indicesParam);
     paramBuffer.addParam(std::move(indicesParam));
 
     paramBuffer.addValueParam("basevertex", ParamType::TGLint, basevertex);
@@ -256,23 +256,24 @@ CallCapture CaptureDrawElementsBaseVertex(const State &glState,
 
 CallCapture CaptureDrawElementsInstancedBaseVertex(const State &glState,
                                                    bool isCallValid,
-                                                   GLenum mode,
+                                                   PrimitiveMode modePacked,
                                                    GLsizei count,
-                                                   GLenum type,
+                                                   DrawElementsType typePacked,
                                                    const void *indices,
                                                    GLsizei instancecount,
                                                    GLint basevertex)
 {
     ParamBuffer paramBuffer;
 
-    paramBuffer.addEnumParam("mode", GLenumGroup::PrimitiveType, ParamType::TGLenum, mode);
+    paramBuffer.addValueParam("modePacked", ParamType::TPrimitiveMode, modePacked);
     paramBuffer.addValueParam("count", ParamType::TGLsizei, count);
-    paramBuffer.addEnumParam("type", GLenumGroup::DrawElementsType, ParamType::TGLenum, type);
+    paramBuffer.addValueParam("typePacked", ParamType::TDrawElementsType, typePacked);
 
     ParamCapture indicesParam("indices", ParamType::TvoidConstPointer);
     InitParamValue(ParamType::TvoidConstPointer, indices, &indicesParam.value);
-    CaptureDrawElementsInstancedBaseVertex_indices(glState, isCallValid, mode, count, type, indices,
-                                                   instancecount, basevertex, &indicesParam);
+    CaptureDrawElementsInstancedBaseVertex_indices(glState, isCallValid, modePacked, count,
+                                                   typePacked, indices, instancecount, basevertex,
+                                                   &indicesParam);
     paramBuffer.addParam(std::move(indicesParam));
 
     paramBuffer.addValueParam("instancecount", ParamType::TGLsizei, instancecount);
@@ -283,26 +284,26 @@ CallCapture CaptureDrawElementsInstancedBaseVertex(const State &glState,
 
 CallCapture CaptureDrawRangeElementsBaseVertex(const State &glState,
                                                bool isCallValid,
-                                               GLenum mode,
+                                               PrimitiveMode modePacked,
                                                GLuint start,
                                                GLuint end,
                                                GLsizei count,
-                                               GLenum type,
+                                               DrawElementsType typePacked,
                                                const void *indices,
                                                GLint basevertex)
 {
     ParamBuffer paramBuffer;
 
-    paramBuffer.addEnumParam("mode", GLenumGroup::PrimitiveType, ParamType::TGLenum, mode);
+    paramBuffer.addValueParam("modePacked", ParamType::TPrimitiveMode, modePacked);
     paramBuffer.addValueParam("start", ParamType::TGLuint, start);
     paramBuffer.addValueParam("end", ParamType::TGLuint, end);
     paramBuffer.addValueParam("count", ParamType::TGLsizei, count);
-    paramBuffer.addEnumParam("type", GLenumGroup::DrawElementsType, ParamType::TGLenum, type);
+    paramBuffer.addValueParam("typePacked", ParamType::TDrawElementsType, typePacked);
 
     ParamCapture indicesParam("indices", ParamType::TvoidConstPointer);
     InitParamValue(ParamType::TvoidConstPointer, indices, &indicesParam.value);
-    CaptureDrawRangeElementsBaseVertex_indices(glState, isCallValid, mode, start, end, count, type,
-                                               indices, basevertex, &indicesParam);
+    CaptureDrawRangeElementsBaseVertex_indices(glState, isCallValid, modePacked, start, end, count,
+                                               typePacked, indices, basevertex, &indicesParam);
     paramBuffer.addParam(std::move(indicesParam));
 
     paramBuffer.addValueParam("basevertex", ParamType::TGLint, basevertex);
diff --git a/src/libANGLE/capture_gles_3_2_autogen.h b/src/libANGLE/capture_gles_3_2_autogen.h
index 00b5859ae..828c5589e 100644
--- a/src/libANGLE/capture_gles_3_2_autogen.h
+++ b/src/libANGLE/capture_gles_3_2_autogen.h
@@ -91,26 +91,26 @@ angle::CallCapture CaptureDisablei(const State &glState,
                                    GLuint index);
 angle::CallCapture CaptureDrawElementsBaseVertex(const State &glState,
                                                  bool isCallValid,
-                                                 GLenum mode,
+                                                 PrimitiveMode modePacked,
                                                  GLsizei count,
-                                                 GLenum type,
+                                                 DrawElementsType typePacked,
                                                  const void *indices,
                                                  GLint basevertex);
 angle::CallCapture CaptureDrawElementsInstancedBaseVertex(const State &glState,
                                                           bool isCallValid,
-                                                          GLenum mode,
+                                                          PrimitiveMode modePacked,
                                                           GLsizei count,
-                                                          GLenum type,
+                                                          DrawElementsType typePacked,
                                                           const void *indices,
                                                           GLsizei instancecount,
                                                           GLint basevertex);
 angle::CallCapture CaptureDrawRangeElementsBaseVertex(const State &glState,
                                                       bool isCallValid,
-                                                      GLenum mode,
+                                                      PrimitiveMode modePacked,
                                                       GLuint start,
                                                       GLuint end,
                                                       GLsizei count,
-                                                      GLenum type,
+                                                      DrawElementsType typePacked,
                                                       const void *indices,
                                                       GLint basevertex);
 angle::CallCapture CaptureEnablei(const State &glState,
@@ -309,28 +309,28 @@ void CaptureDebugMessageInsert_buf(const State &glState,
                                    angle::ParamCapture *paramCapture);
 void CaptureDrawElementsBaseVertex_indices(const State &glState,
                                            bool isCallValid,
-                                           GLenum mode,
+                                           PrimitiveMode modePacked,
                                            GLsizei count,
-                                           GLenum type,
+                                           DrawElementsType typePacked,
                                            const void *indices,
                                            GLint basevertex,
                                            angle::ParamCapture *paramCapture);
 void CaptureDrawElementsInstancedBaseVertex_indices(const State &glState,
                                                     bool isCallValid,
-                                                    GLenum mode,
+                                                    PrimitiveMode modePacked,
                                                     GLsizei count,
-                                                    GLenum type,
+                                                    DrawElementsType typePacked,
                                                     const void *indices,
                                                     GLsizei instancecount,
                                                     GLint basevertex,
                                                     angle::ParamCapture *paramCapture);
 void CaptureDrawRangeElementsBaseVertex_indices(const State &glState,
                                                 bool isCallValid,
-                                                GLenum mode,
+                                                PrimitiveMode modePacked,
                                                 GLuint start,
                                                 GLuint end,
                                                 GLsizei count,
-                                                GLenum type,
+                                                DrawElementsType typePacked,
                                                 const void *indices,
                                                 GLint basevertex,
                                                 angle::ParamCapture *paramCapture);
diff --git a/src/libANGLE/capture_gles_3_2_params.cpp b/src/libANGLE/capture_gles_3_2_params.cpp
index c3210c355..cbd887750 100644
--- a/src/libANGLE/capture_gles_3_2_params.cpp
+++ b/src/libANGLE/capture_gles_3_2_params.cpp
@@ -50,9 +50,9 @@ void CaptureDebugMessageInsert_buf(const State &glState,
 
 void CaptureDrawElementsBaseVertex_indices(const State &glState,
                                            bool isCallValid,
-                                           GLenum mode,
+                                           PrimitiveMode modePacked,
                                            GLsizei count,
-                                           GLenum type,
+                                           DrawElementsType typePacked,
                                            const void *indices,
                                            GLint basevertex,
                                            ParamCapture *indicesParam)
@@ -62,9 +62,9 @@ void CaptureDrawElementsBaseVertex_indices(const State &glState,
 
 void CaptureDrawElementsInstancedBaseVertex_indices(const State &glState,
                                                     bool isCallValid,
-                                                    GLenum mode,
+                                                    PrimitiveMode modePacked,
                                                     GLsizei count,
-                                                    GLenum type,
+                                                    DrawElementsType typePacked,
                                                     const void *indices,
                                                     GLsizei instancecount,
                                                     GLint basevertex,
@@ -75,11 +75,11 @@ void CaptureDrawElementsInstancedBaseVertex_indices(const State &glState,
 
 void CaptureDrawRangeElementsBaseVertex_indices(const State &glState,
                                                 bool isCallValid,
-                                                GLenum mode,
+                                                PrimitiveMode modePacked,
                                                 GLuint start,
                                                 GLuint end,
                                                 GLsizei count,
-                                                GLenum type,
+                                                DrawElementsType typePacked,
                                                 const void *indices,
                                                 GLint basevertex,
                                                 ParamCapture *indicesParam)
diff --git a/src/libANGLE/capture_gles_ext_autogen.cpp b/src/libANGLE/capture_gles_ext_autogen.cpp
index 9e91e9553..e46ab9bc0 100644
--- a/src/libANGLE/capture_gles_ext_autogen.cpp
+++ b/src/libANGLE/capture_gles_ext_autogen.cpp
@@ -3700,6 +3700,127 @@ CallCapture CaptureDrawBuffersEXT(const State &glState,
     return CallCapture(gl::EntryPoint::DrawBuffersEXT, std::move(paramBuffer));
 }
 
+CallCapture CaptureDrawElementsBaseVertexEXT(const State &glState,
+                                             bool isCallValid,
+                                             PrimitiveMode modePacked,
+                                             GLsizei count,
+                                             DrawElementsType typePacked,
+                                             const void *indices,
+                                             GLint basevertex)
+{
+    ParamBuffer paramBuffer;
+
+    paramBuffer.addValueParam("modePacked", ParamType::TPrimitiveMode, modePacked);
+    paramBuffer.addValueParam("count", ParamType::TGLsizei, count);
+    paramBuffer.addValueParam("typePacked", ParamType::TDrawElementsType, typePacked);
+
+    ParamCapture indicesParam("indices", ParamType::TvoidConstPointer);
+    InitParamValue(ParamType::TvoidConstPointer, indices, &indicesParam.value);
+    CaptureDrawElementsBaseVertexEXT_indices(glState, isCallValid, modePacked, count, typePacked,
+                                             indices, basevertex, &indicesParam);
+    paramBuffer.addParam(std::move(indicesParam));
+
+    paramBuffer.addValueParam("basevertex", ParamType::TGLint, basevertex);
+
+    return CallCapture(gl::EntryPoint::DrawElementsBaseVertexEXT, std::move(paramBuffer));
+}
+
+CallCapture CaptureDrawElementsInstancedBaseVertexEXT(const State &glState,
+                                                      bool isCallValid,
+                                                      PrimitiveMode modePacked,
+                                                      GLsizei count,
+                                                      DrawElementsType typePacked,
+                                                      const void *indices,
+                                                      GLsizei instancecount,
+                                                      GLint basevertex)
+{
+    ParamBuffer paramBuffer;
+
+    paramBuffer.addValueParam("modePacked", ParamType::TPrimitiveMode, modePacked);
+    paramBuffer.addValueParam("count", ParamType::TGLsizei, count);
+    paramBuffer.addValueParam("typePacked", ParamType::TDrawElementsType, typePacked);
+
+    ParamCapture indicesParam("indices", ParamType::TvoidConstPointer);
+    InitParamValue(ParamType::TvoidConstPointer, indices, &indicesParam.value);
+    CaptureDrawElementsInstancedBaseVertexEXT_indices(glState, isCallValid, modePacked, count,
+                                                      typePacked, indices, instancecount,
+                                                      basevertex, &indicesParam);
+    paramBuffer.addParam(std::move(indicesParam));
+
+    paramBuffer.addValueParam("instancecount", ParamType::TGLsizei, instancecount);
+    paramBuffer.addValueParam("basevertex", ParamType::TGLint, basevertex);
+
+    return CallCapture(gl::EntryPoint::DrawElementsInstancedBaseVertexEXT, std::move(paramBuffer));
+}
+
+CallCapture CaptureDrawRangeElementsBaseVertexEXT(const State &glState,
+                                                  bool isCallValid,
+                                                  PrimitiveMode modePacked,
+                                                  GLuint start,
+                                                  GLuint end,
+                                                  GLsizei count,
+                                                  DrawElementsType typePacked,
+                                                  const void *indices,
+                                                  GLint basevertex)
+{
+    ParamBuffer paramBuffer;
+
+    paramBuffer.addValueParam("modePacked", ParamType::TPrimitiveMode, modePacked);
+    paramBuffer.addValueParam("start", ParamType::TGLuint, start);
+    paramBuffer.addValueParam("end", ParamType::TGLuint, end);
+    paramBuffer.addValueParam("count", ParamType::TGLsizei, count);
+    paramBuffer.addValueParam("typePacked", ParamType::TDrawElementsType, typePacked);
+
+    ParamCapture indicesParam("indices", ParamType::TvoidConstPointer);
+    InitParamValue(ParamType::TvoidConstPointer, indices, &indicesParam.value);
+    CaptureDrawRangeElementsBaseVertexEXT_indices(glState, isCallValid, modePacked, start, end,
+                                                  count, typePacked, indices, basevertex,
+                                                  &indicesParam);
+    paramBuffer.addParam(std::move(indicesParam));
+
+    paramBuffer.addValueParam("basevertex", ParamType::TGLint, basevertex);
+
+    return CallCapture(gl::EntryPoint::DrawRangeElementsBaseVertexEXT, std::move(paramBuffer));
+}
+
+CallCapture CaptureMultiDrawElementsBaseVertexEXT(const State &glState,
+                                                  bool isCallValid,
+                                                  GLenum mode,
+                                                  const GLsizei *count,
+                                                  GLenum type,
+                                                  const void *const *indices,
+                                                  GLsizei primcount,
+                                                  const GLint *basevertex)
+{
+    ParamBuffer paramBuffer;
+
+    paramBuffer.addEnumParam("mode", GLenumGroup::PrimitiveType, ParamType::TGLenum, mode);
+
+    ParamCapture countParam("count", ParamType::TGLsizeiConstPointer);
+    InitParamValue(ParamType::TGLsizeiConstPointer, count, &countParam.value);
+    CaptureMultiDrawElementsBaseVertexEXT_count(glState, isCallValid, mode, count, type, indices,
+                                                primcount, basevertex, &countParam);
+    paramBuffer.addParam(std::move(countParam));
+
+    paramBuffer.addEnumParam("type", GLenumGroup::DrawElementsType, ParamType::TGLenum, type);
+
+    ParamCapture indicesParam("indices", ParamType::TvoidConstPointerPointer);
+    InitParamValue(ParamType::TvoidConstPointerPointer, indices, &indicesParam.value);
+    CaptureMultiDrawElementsBaseVertexEXT_indices(glState, isCallValid, mode, count, type, indices,
+                                                  primcount, basevertex, &indicesParam);
+    paramBuffer.addParam(std::move(indicesParam));
+
+    paramBuffer.addValueParam("primcount", ParamType::TGLsizei, primcount);
+
+    ParamCapture basevertexParam("basevertex", ParamType::TGLintConstPointer);
+    InitParamValue(ParamType::TGLintConstPointer, basevertex, &basevertexParam.value);
+    CaptureMultiDrawElementsBaseVertexEXT_basevertex(
+        glState, isCallValid, mode, count, type, indices, primcount, basevertex, &basevertexParam);
+    paramBuffer.addParam(std::move(basevertexParam));
+
+    return CallCapture(gl::EntryPoint::MultiDrawElementsBaseVertexEXT, std::move(paramBuffer));
+}
+
 CallCapture CaptureFramebufferTextureEXT(const State &glState,
                                          bool isCallValid,
                                          GLenum target,
@@ -4888,6 +5009,89 @@ CallCapture CaptureEGLImageTargetTexture2DOES(const State &glState,
     return CallCapture(gl::EntryPoint::EGLImageTargetTexture2DOES, std::move(paramBuffer));
 }
 
+CallCapture CaptureDrawElementsBaseVertexOES(const State &glState,
+                                             bool isCallValid,
+                                             PrimitiveMode modePacked,
+                                             GLsizei count,
+                                             DrawElementsType typePacked,
+                                             const void *indices,
+                                             GLint basevertex)
+{
+    ParamBuffer paramBuffer;
+
+    paramBuffer.addValueParam("modePacked", ParamType::TPrimitiveMode, modePacked);
+    paramBuffer.addValueParam("count", ParamType::TGLsizei, count);
+    paramBuffer.addValueParam("typePacked", ParamType::TDrawElementsType, typePacked);
+
+    ParamCapture indicesParam("indices", ParamType::TvoidConstPointer);
+    InitParamValue(ParamType::TvoidConstPointer, indices, &indicesParam.value);
+    CaptureDrawElementsBaseVertexOES_indices(glState, isCallValid, modePacked, count, typePacked,
+                                             indices, basevertex, &indicesParam);
+    paramBuffer.addParam(std::move(indicesParam));
+
+    paramBuffer.addValueParam("basevertex", ParamType::TGLint, basevertex);
+
+    return CallCapture(gl::EntryPoint::DrawElementsBaseVertexOES, std::move(paramBuffer));
+}
+
+CallCapture CaptureDrawElementsInstancedBaseVertexOES(const State &glState,
+                                                      bool isCallValid,
+                                                      PrimitiveMode modePacked,
+                                                      GLsizei count,
+                                                      DrawElementsType typePacked,
+                                                      const void *indices,
+                                                      GLsizei instancecount,
+                                                      GLint basevertex)
+{
+    ParamBuffer paramBuffer;
+
+    paramBuffer.addValueParam("modePacked", ParamType::TPrimitiveMode, modePacked);
+    paramBuffer.addValueParam("count", ParamType::TGLsizei, count);
+    paramBuffer.addValueParam("typePacked", ParamType::TDrawElementsType, typePacked);
+
+    ParamCapture indicesParam("indices", ParamType::TvoidConstPointer);
+    InitParamValue(ParamType::TvoidConstPointer, indices, &indicesParam.value);
+    CaptureDrawElementsInstancedBaseVertexOES_indices(glState, isCallValid, modePacked, count,
+                                                      typePacked, indices, instancecount,
+                                                      basevertex, &indicesParam);
+    paramBuffer.addParam(std::move(indicesParam));
+
+    paramBuffer.addValueParam("instancecount", ParamType::TGLsizei, instancecount);
+    paramBuffer.addValueParam("basevertex", ParamType::TGLint, basevertex);
+
+    return CallCapture(gl::EntryPoint::DrawElementsInstancedBaseVertexOES, std::move(paramBuffer));
+}
+
+CallCapture CaptureDrawRangeElementsBaseVertexOES(const State &glState,
+                                                  bool isCallValid,
+                                                  PrimitiveMode modePacked,
+                                                  GLuint start,
+                                                  GLuint end,
+                                                  GLsizei count,
+                                                  DrawElementsType typePacked,
+                                                  const void *indices,
+                                                  GLint basevertex)
+{
+    ParamBuffer paramBuffer;
+
+    paramBuffer.addValueParam("modePacked", ParamType::TPrimitiveMode, modePacked);
+    paramBuffer.addValueParam("start", ParamType::TGLuint, start);
+    paramBuffer.addValueParam("end", ParamType::TGLuint, end);
+    paramBuffer.addValueParam("count", ParamType::TGLsizei, count);
+    paramBuffer.addValueParam("typePacked", ParamType::TDrawElementsType, typePacked);
+
+    ParamCapture indicesParam("indices", ParamType::TvoidConstPointer);
+    InitParamValue(ParamType::TvoidConstPointer, indices, &indicesParam.value);
+    CaptureDrawRangeElementsBaseVertexOES_indices(glState, isCallValid, modePacked, start, end,
+                                                  count, typePacked, indices, basevertex,
+                                                  &indicesParam);
+    paramBuffer.addParam(std::move(indicesParam));
+
+    paramBuffer.addValueParam("basevertex", ParamType::TGLint, basevertex);
+
+    return CallCapture(gl::EntryPoint::DrawRangeElementsBaseVertexOES, std::move(paramBuffer));
+}
+
 CallCapture CaptureDrawTexfOES(const State &glState,
                                bool isCallValid,
                                GLfloat x,
diff --git a/src/libANGLE/capture_gles_ext_autogen.h b/src/libANGLE/capture_gles_ext_autogen.h
index c3c7951c9..a8c2137cf 100644
--- a/src/libANGLE/capture_gles_ext_autogen.h
+++ b/src/libANGLE/capture_gles_ext_autogen.h
@@ -1054,6 +1054,40 @@ angle::CallCapture CaptureDrawBuffersEXT(const State &glState,
                                          GLsizei n,
                                          const GLenum *bufs);
 
+// GL_EXT_draw_elements_base_vertex
+angle::CallCapture CaptureDrawElementsBaseVertexEXT(const State &glState,
+                                                    bool isCallValid,
+                                                    PrimitiveMode modePacked,
+                                                    GLsizei count,
+                                                    DrawElementsType typePacked,
+                                                    const void *indices,
+                                                    GLint basevertex);
+angle::CallCapture CaptureDrawElementsInstancedBaseVertexEXT(const State &glState,
+                                                             bool isCallValid,
+                                                             PrimitiveMode modePacked,
+                                                             GLsizei count,
+                                                             DrawElementsType typePacked,
+                                                             const void *indices,
+                                                             GLsizei instancecount,
+                                                             GLint basevertex);
+angle::CallCapture CaptureDrawRangeElementsBaseVertexEXT(const State &glState,
+                                                         bool isCallValid,
+                                                         PrimitiveMode modePacked,
+                                                         GLuint start,
+                                                         GLuint end,
+                                                         GLsizei count,
+                                                         DrawElementsType typePacked,
+                                                         const void *indices,
+                                                         GLint basevertex);
+angle::CallCapture CaptureMultiDrawElementsBaseVertexEXT(const State &glState,
+                                                         bool isCallValid,
+                                                         GLenum mode,
+                                                         const GLsizei *count,
+                                                         GLenum type,
+                                                         const void *const *indices,
+                                                         GLsizei primcount,
+                                                         const GLint *basevertex);
+
 // GL_EXT_geometry_shader
 angle::CallCapture CaptureFramebufferTextureEXT(const State &glState,
                                                 bool isCallValid,
@@ -1413,6 +1447,32 @@ angle::CallCapture CaptureEGLImageTargetTexture2DOES(const State &glState,
                                                      TextureType targetPacked,
                                                      GLeglImageOES image);
 
+// GL_OES_draw_elements_base_vertex
+angle::CallCapture CaptureDrawElementsBaseVertexOES(const State &glState,
+                                                    bool isCallValid,
+                                                    PrimitiveMode modePacked,
+                                                    GLsizei count,
+                                                    DrawElementsType typePacked,
+                                                    const void *indices,
+                                                    GLint basevertex);
+angle::CallCapture CaptureDrawElementsInstancedBaseVertexOES(const State &glState,
+                                                             bool isCallValid,
+                                                             PrimitiveMode modePacked,
+                                                             GLsizei count,
+                                                             DrawElementsType typePacked,
+                                                             const void *indices,
+                                                             GLsizei instancecount,
+                                                             GLint basevertex);
+angle::CallCapture CaptureDrawRangeElementsBaseVertexOES(const State &glState,
+                                                         bool isCallValid,
+                                                         PrimitiveMode modePacked,
+                                                         GLuint start,
+                                                         GLuint end,
+                                                         GLsizei count,
+                                                         DrawElementsType typePacked,
+                                                         const void *indices,
+                                                         GLint basevertex);
+
 // GL_OES_draw_texture
 angle::CallCapture CaptureDrawTexfOES(const State &glState,
                                       bool isCallValid,
@@ -3333,6 +3393,60 @@ void CaptureDrawBuffersEXT_bufs(const State &glState,
                                 GLsizei n,
                                 const GLenum *bufs,
                                 angle::ParamCapture *paramCapture);
+void CaptureDrawElementsBaseVertexEXT_indices(const State &glState,
+                                              bool isCallValid,
+                                              PrimitiveMode modePacked,
+                                              GLsizei count,
+                                              DrawElementsType typePacked,
+                                              const void *indices,
+                                              GLint basevertex,
+                                              angle::ParamCapture *paramCapture);
+void CaptureDrawElementsInstancedBaseVertexEXT_indices(const State &glState,
+                                                       bool isCallValid,
+                                                       PrimitiveMode modePacked,
+                                                       GLsizei count,
+                                                       DrawElementsType typePacked,
+                                                       const void *indices,
+                                                       GLsizei instancecount,
+                                                       GLint basevertex,
+                                                       angle::ParamCapture *paramCapture);
+void CaptureDrawRangeElementsBaseVertexEXT_indices(const State &glState,
+                                                   bool isCallValid,
+                                                   PrimitiveMode modePacked,
+                                                   GLuint start,
+                                                   GLuint end,
+                                                   GLsizei count,
+                                                   DrawElementsType typePacked,
+                                                   const void *indices,
+                                                   GLint basevertex,
+                                                   angle::ParamCapture *paramCapture);
+void CaptureMultiDrawElementsBaseVertexEXT_count(const State &glState,
+                                                 bool isCallValid,
+                                                 GLenum mode,
+                                                 const GLsizei *count,
+                                                 GLenum type,
+                                                 const void *const *indices,
+                                                 GLsizei primcount,
+                                                 const GLint *basevertex,
+                                                 angle::ParamCapture *paramCapture);
+void CaptureMultiDrawElementsBaseVertexEXT_indices(const State &glState,
+                                                   bool isCallValid,
+                                                   GLenum mode,
+                                                   const GLsizei *count,
+                                                   GLenum type,
+                                                   const void *const *indices,
+                                                   GLsizei primcount,
+                                                   const GLint *basevertex,
+                                                   angle::ParamCapture *paramCapture);
+void CaptureMultiDrawElementsBaseVertexEXT_basevertex(const State &glState,
+                                                      bool isCallValid,
+                                                      GLenum mode,
+                                                      const GLsizei *count,
+                                                      GLenum type,
+                                                      const void *const *indices,
+                                                      GLsizei primcount,
+                                                      const GLint *basevertex,
+                                                      angle::ParamCapture *paramCapture);
 void CaptureDrawElementsInstancedEXT_indices(const State &glState,
                                              bool isCallValid,
                                              PrimitiveMode modePacked,
@@ -3648,6 +3762,33 @@ void CaptureGetFenceivNV_params(const State &glState,
                                 GLenum pname,
                                 GLint *params,
                                 angle::ParamCapture *paramCapture);
+void CaptureDrawElementsBaseVertexOES_indices(const State &glState,
+                                              bool isCallValid,
+                                              PrimitiveMode modePacked,
+                                              GLsizei count,
+                                              DrawElementsType typePacked,
+                                              const void *indices,
+                                              GLint basevertex,
+                                              angle::ParamCapture *paramCapture);
+void CaptureDrawElementsInstancedBaseVertexOES_indices(const State &glState,
+                                                       bool isCallValid,
+                                                       PrimitiveMode modePacked,
+                                                       GLsizei count,
+                                                       DrawElementsType typePacked,
+                                                       const void *indices,
+                                                       GLsizei instancecount,
+                                                       GLint basevertex,
+                                                       angle::ParamCapture *paramCapture);
+void CaptureDrawRangeElementsBaseVertexOES_indices(const State &glState,
+                                                   bool isCallValid,
+                                                   PrimitiveMode modePacked,
+                                                   GLuint start,
+                                                   GLuint end,
+                                                   GLsizei count,
+                                                   DrawElementsType typePacked,
+                                                   const void *indices,
+                                                   GLint basevertex,
+                                                   angle::ParamCapture *paramCapture);
 void CaptureDrawTexfvOES_coords(const State &glState,
                                 bool isCallValid,
                                 const GLfloat *coords,
diff --git a/src/libANGLE/capture_gles_ext_params.cpp b/src/libANGLE/capture_gles_ext_params.cpp
index d564a4d0d..5a4d7f7c6 100644
--- a/src/libANGLE/capture_gles_ext_params.cpp
+++ b/src/libANGLE/capture_gles_ext_params.cpp
@@ -173,6 +173,123 @@ void CaptureDrawElementsInstancedANGLE_indices(const State &glState,
     UNIMPLEMENTED();
 }
 
+void CaptureDrawElementsBaseVertexEXT_indices(const State &glState,
+                                              bool isCallValid,
+                                              PrimitiveMode modePacked,
+                                              GLsizei count,
+                                              DrawElementsType typePacked,
+                                              const void *indices,
+                                              GLint basevertex,
+                                              ParamCapture *indicesParam)
+{
+    UNIMPLEMENTED();
+}
+
+void CaptureDrawElementsInstancedBaseVertexEXT_indices(const State &glState,
+                                                       bool isCallValid,
+                                                       PrimitiveMode modePacked,
+                                                       GLsizei count,
+                                                       DrawElementsType typePacked,
+                                                       const void *indices,
+                                                       GLsizei instancecount,
+                                                       GLint basevertex,
+                                                       ParamCapture *indicesParam)
+{
+    UNIMPLEMENTED();
+}
+
+void CaptureDrawRangeElementsBaseVertexEXT_indices(const State &glState,
+                                                   bool isCallValid,
+                                                   PrimitiveMode modePacked,
+                                                   GLuint start,
+                                                   GLuint end,
+                                                   GLsizei count,
+                                                   DrawElementsType typePacked,
+                                                   const void *indices,
+                                                   GLint basevertex,
+                                                   ParamCapture *indicesParam)
+{
+    UNIMPLEMENTED();
+}
+
+void CaptureMultiDrawElementsBaseVertexEXT_indices(const State &glState,
+                                                   bool isCallValid,
+                                                   PrimitiveMode modePacked,
+                                                   const GLsizei *count,
+                                                   DrawElementsType typePacked,
+                                                   const void *const *indices,
+                                                   GLsizei drawcount,
+                                                   const GLint *basevertex,
+                                                   ParamCapture *indicesParam)
+{
+    UNIMPLEMENTED();
+}
+
+void CaptureMultiDrawElementsBaseVertexEXT_count(const State &glState,
+                                                 bool isCallValid,
+                                                 PrimitiveMode modePacked,
+                                                 const GLsizei *count,
+                                                 DrawElementsType typePacked,
+                                                 const void *const *indices,
+                                                 GLsizei drawcount,
+                                                 const GLint *basevertex,
+                                                 ParamCapture *countParam)
+{
+    UNIMPLEMENTED();
+}
+
+void CaptureDrawElementsBaseVertexOES_indices(const State &glState,
+                                              bool isCallValid,
+                                              PrimitiveMode modePacked,
+                                              GLsizei count,
+                                              DrawElementsType typePacked,
+                                              const void *indices,
+                                              GLint basevertex,
+                                              ParamCapture *indicesParam)
+{
+    UNIMPLEMENTED();
+}
+
+void CaptureMultiDrawElementsBaseVertexEXT_basevertex(const State &glState,
+                                                      bool isCallValid,
+                                                      PrimitiveMode modePacked,
+                                                      const GLsizei *count,
+                                                      DrawElementsType typePacked,
+                                                      const void *const *indices,
+                                                      GLsizei drawcount,
+                                                      const GLint *basevertex,
+                                                      ParamCapture *basevertexParam)
+{
+    UNIMPLEMENTED();
+}
+
+void CaptureDrawElementsInstancedBaseVertexOES_indices(const State &glState,
+                                                       bool isCallValid,
+                                                       PrimitiveMode modePacked,
+                                                       GLsizei count,
+                                                       DrawElementsType typePacked,
+                                                       const void *indices,
+                                                       GLsizei instancecount,
+                                                       GLint basevertex,
+                                                       ParamCapture *indicesParam)
+{
+    UNIMPLEMENTED();
+}
+
+void CaptureDrawRangeElementsBaseVertexOES_indices(const State &glState,
+                                                   bool isCallValid,
+                                                   PrimitiveMode modePacked,
+                                                   GLuint start,
+                                                   GLuint end,
+                                                   GLsizei count,
+                                                   DrawElementsType typePacked,
+                                                   const void *indices,
+                                                   GLint basevertex,
+                                                   ParamCapture *indicesParam)
+{
+    UNIMPLEMENTED();
+}
+
 void CaptureMultiDrawArraysANGLE_firsts(const State &glState,
                                         bool isCallValid,
                                         PrimitiveMode modePacked,
diff --git a/src/libANGLE/entry_points_enum_autogen.cpp b/src/libANGLE/entry_points_enum_autogen.cpp
index 3a20e7ce4..4903ab8af 100644
--- a/src/libANGLE/entry_points_enum_autogen.cpp
+++ b/src/libANGLE/entry_points_enum_autogen.cpp
@@ -512,6 +512,10 @@ const char *GetEntryPointName(EntryPoint ep)
             return "glDrawElements";
         case EntryPoint::DrawElementsBaseVertex:
             return "glDrawElementsBaseVertex";
+        case EntryPoint::DrawElementsBaseVertexEXT:
+            return "glDrawElementsBaseVertexEXT";
+        case EntryPoint::DrawElementsBaseVertexOES:
+            return "glDrawElementsBaseVertexOES";
         case EntryPoint::DrawElementsIndirect:
             return "glDrawElementsIndirect";
         case EntryPoint::DrawElementsInstanced:
@@ -526,6 +530,10 @@ const char *GetEntryPointName(EntryPoint ep)
             return "glDrawElementsInstancedBaseVertexBaseInstance";
         case EntryPoint::DrawElementsInstancedBaseVertexBaseInstanceANGLE:
             return "glDrawElementsInstancedBaseVertexBaseInstanceANGLE";
+        case EntryPoint::DrawElementsInstancedBaseVertexEXT:
+            return "glDrawElementsInstancedBaseVertexEXT";
+        case EntryPoint::DrawElementsInstancedBaseVertexOES:
+            return "glDrawElementsInstancedBaseVertexOES";
         case EntryPoint::DrawElementsInstancedEXT:
             return "glDrawElementsInstancedEXT";
         case EntryPoint::DrawPixels:
@@ -534,6 +542,10 @@ const char *GetEntryPointName(EntryPoint ep)
             return "glDrawRangeElements";
         case EntryPoint::DrawRangeElementsBaseVertex:
             return "glDrawRangeElementsBaseVertex";
+        case EntryPoint::DrawRangeElementsBaseVertexEXT:
+            return "glDrawRangeElementsBaseVertexEXT";
+        case EntryPoint::DrawRangeElementsBaseVertexOES:
+            return "glDrawRangeElementsBaseVertexOES";
         case EntryPoint::DrawTexfOES:
             return "glDrawTexfOES";
         case EntryPoint::DrawTexfvOES:
@@ -1466,6 +1478,8 @@ const char *GetEntryPointName(EntryPoint ep)
             return "glMultiDrawElementsANGLE";
         case EntryPoint::MultiDrawElementsBaseVertex:
             return "glMultiDrawElementsBaseVertex";
+        case EntryPoint::MultiDrawElementsBaseVertexEXT:
+            return "glMultiDrawElementsBaseVertexEXT";
         case EntryPoint::MultiDrawElementsIndirect:
             return "glMultiDrawElementsIndirect";
         case EntryPoint::MultiDrawElementsIndirectCount:
diff --git a/src/libANGLE/entry_points_enum_autogen.h b/src/libANGLE/entry_points_enum_autogen.h
index cfc5e721e..24b827a33 100644
--- a/src/libANGLE/entry_points_enum_autogen.h
+++ b/src/libANGLE/entry_points_enum_autogen.h
@@ -262,6 +262,8 @@ enum class EntryPoint
     DrawBuffersEXT,
     DrawElements,
     DrawElementsBaseVertex,
+    DrawElementsBaseVertexEXT,
+    DrawElementsBaseVertexOES,
     DrawElementsIndirect,
     DrawElementsInstanced,
     DrawElementsInstancedANGLE,
@@ -269,10 +271,14 @@ enum class EntryPoint
     DrawElementsInstancedBaseVertex,
     DrawElementsInstancedBaseVertexBaseInstance,
     DrawElementsInstancedBaseVertexBaseInstanceANGLE,
+    DrawElementsInstancedBaseVertexEXT,
+    DrawElementsInstancedBaseVertexOES,
     DrawElementsInstancedEXT,
     DrawPixels,
     DrawRangeElements,
     DrawRangeElementsBaseVertex,
+    DrawRangeElementsBaseVertexEXT,
+    DrawRangeElementsBaseVertexOES,
     DrawTexfOES,
     DrawTexfvOES,
     DrawTexiOES,
@@ -739,6 +745,7 @@ enum class EntryPoint
     MultiDrawElements,
     MultiDrawElementsANGLE,
     MultiDrawElementsBaseVertex,
+    MultiDrawElementsBaseVertexEXT,
     MultiDrawElementsIndirect,
     MultiDrawElementsIndirectCount,
     MultiDrawElementsInstancedANGLE,
diff --git a/src/libANGLE/frame_capture_replay_autogen.cpp b/src/libANGLE/frame_capture_replay_autogen.cpp
index 62687501c..1fe3e3f46 100644
--- a/src/libANGLE/frame_capture_replay_autogen.cpp
+++ b/src/libANGLE/frame_capture_replay_autogen.cpp
@@ -695,9 +695,10 @@ void FrameCapture::ReplayCall(gl::Context *context,
             break;
         case gl::EntryPoint::DrawElementsBaseVertex:
             context->drawElementsBaseVertex(
-                params.getParam("mode", ParamType::TGLenum, 0).value.GLenumVal,
+                params.getParam("modePacked", ParamType::TPrimitiveMode, 0).value.PrimitiveModeVal,
                 params.getParam("count", ParamType::TGLsizei, 1).value.GLsizeiVal,
-                params.getParam("type", ParamType::TGLenum, 2).value.GLenumVal,
+                params.getParam("typePacked", ParamType::TDrawElementsType, 2)
+                    .value.DrawElementsTypeVal,
                 replayContext->getAsConstPointer<const void *>(
                     params.getParam("indices", ParamType::TvoidConstPointer, 3)),
                 params.getParam("basevertex", ParamType::TGLint, 4).value.GLintVal);
@@ -722,9 +723,10 @@ void FrameCapture::ReplayCall(gl::Context *context,
             break;
         case gl::EntryPoint::DrawElementsInstancedBaseVertex:
             context->drawElementsInstancedBaseVertex(
-                params.getParam("mode", ParamType::TGLenum, 0).value.GLenumVal,
+                params.getParam("modePacked", ParamType::TPrimitiveMode, 0).value.PrimitiveModeVal,
                 params.getParam("count", ParamType::TGLsizei, 1).value.GLsizeiVal,
-                params.getParam("type", ParamType::TGLenum, 2).value.GLenumVal,
+                params.getParam("typePacked", ParamType::TDrawElementsType, 2)
+                    .value.DrawElementsTypeVal,
                 replayContext->getAsConstPointer<const void *>(
                     params.getParam("indices", ParamType::TvoidConstPointer, 3)),
                 params.getParam("instancecount", ParamType::TGLsizei, 4).value.GLsizeiVal,
@@ -755,11 +757,12 @@ void FrameCapture::ReplayCall(gl::Context *context,
             break;
         case gl::EntryPoint::DrawRangeElementsBaseVertex:
             context->drawRangeElementsBaseVertex(
-                params.getParam("mode", ParamType::TGLenum, 0).value.GLenumVal,
+                params.getParam("modePacked", ParamType::TPrimitiveMode, 0).value.PrimitiveModeVal,
                 params.getParam("start", ParamType::TGLuint, 1).value.GLuintVal,
                 params.getParam("end", ParamType::TGLuint, 2).value.GLuintVal,
                 params.getParam("count", ParamType::TGLsizei, 3).value.GLsizeiVal,
-                params.getParam("type", ParamType::TGLenum, 4).value.GLenumVal,
+                params.getParam("typePacked", ParamType::TDrawElementsType, 4)
+                    .value.DrawElementsTypeVal,
                 replayContext->getAsConstPointer<const void *>(
                     params.getParam("indices", ParamType::TvoidConstPointer, 5)),
                 params.getParam("basevertex", ParamType::TGLint, 6).value.GLintVal);
@@ -1921,6 +1924,18 @@ void FrameCapture::ReplayCall(gl::Context *context,
                     params.getParam("indices", ParamType::TvoidConstPointerPointer, 3)),
                 params.getParam("drawcount", ParamType::TGLsizei, 4).value.GLsizeiVal);
             break;
+        case gl::EntryPoint::MultiDrawElementsBaseVertex:
+            context->multiDrawElementsBaseVertex(
+                params.getParam("mode", ParamType::TGLenum, 0).value.GLenumVal,
+                replayContext->getAsConstPointer<const GLsizei *>(
+                    params.getParam("count", ParamType::TGLsizeiConstPointer, 1)),
+                params.getParam("type", ParamType::TGLenum, 2).value.GLenumVal,
+                replayContext->getAsPointerConstPointer<const void *const *>(
+                    params.getParam("indices", ParamType::TvoidConstPointerPointer, 3)),
+                params.getParam("drawcount", ParamType::TGLsizei, 4).value.GLsizeiVal,
+                replayContext->getAsConstPointer<const GLint *>(
+                    params.getParam("basevertex", ParamType::TGLintConstPointer, 5)));
+            break;
         case gl::EntryPoint::MultiTexCoord4f:
             context->multiTexCoord4f(
                 params.getParam("target", ParamType::TGLenum, 0).value.GLenumVal,
diff --git a/src/libANGLE/renderer/ContextImpl.h b/src/libANGLE/renderer/ContextImpl.h
index bac2cf740..5f04ba1a5 100644
--- a/src/libANGLE/renderer/ContextImpl.h
+++ b/src/libANGLE/renderer/ContextImpl.h
@@ -64,12 +64,25 @@ class ContextImpl : public GLImplFactory
                                        GLsizei count,
                                        gl::DrawElementsType type,
                                        const void *indices)                                = 0;
+    virtual angle::Result drawElementsBaseVertex(const gl::Context *context,
+                                                 gl::PrimitiveMode mode,
+                                                 GLsizei count,
+                                                 gl::DrawElementsType type,
+                                                 const void *indices,
+                                                 GLint baseVertex)                         = 0;
     virtual angle::Result drawElementsInstanced(const gl::Context *context,
                                                 gl::PrimitiveMode mode,
                                                 GLsizei count,
                                                 gl::DrawElementsType type,
                                                 const void *indices,
                                                 GLsizei instances)                         = 0;
+    virtual angle::Result drawElementsInstancedBaseVertex(const gl::Context *context,
+                                                          gl::PrimitiveMode mode,
+                                                          GLsizei count,
+                                                          gl::DrawElementsType type,
+                                                          const void *indices,
+                                                          GLsizei instances,
+                                                          GLint baseVertex)                = 0;
     virtual angle::Result drawElementsInstancedBaseVertexBaseInstance(const gl::Context *context,
                                                                       gl::PrimitiveMode mode,
                                                                       GLsizei count,
@@ -85,6 +98,14 @@ class ContextImpl : public GLImplFactory
                                             GLsizei count,
                                             gl::DrawElementsType type,
                                             const void *indices)                           = 0;
+    virtual angle::Result drawRangeElementsBaseVertex(const gl::Context *context,
+                                                      gl::PrimitiveMode mode,
+                                                      GLuint start,
+                                                      GLuint end,
+                                                      GLsizei count,
+                                                      gl::DrawElementsType type,
+                                                      const void *indices,
+                                                      GLint baseVertex)                    = 0;
 
     virtual angle::Result drawArraysIndirect(const gl::Context *context,
                                              gl::PrimitiveMode mode,
diff --git a/src/libANGLE/renderer/d3d/d3d11/Context11.cpp b/src/libANGLE/renderer/d3d/d3d11/Context11.cpp
index 4cc0faa0e..9a12f1ff7 100644
--- a/src/libANGLE/renderer/d3d/d3d11/Context11.cpp
+++ b/src/libANGLE/renderer/d3d/d3d11/Context11.cpp
@@ -337,6 +337,18 @@ angle::Result Context11::drawElements(const gl::Context *context,
     return drawElementsImpl(context, mode, count, type, indices, 0, 0, 0);
 }
 
+angle::Result Context11::drawElementsBaseVertex(const gl::Context *context,
+                                                gl::PrimitiveMode mode,
+                                                GLsizei count,
+                                                gl::DrawElementsType type,
+                                                const void *indices,
+                                                GLint baseVertex)
+{
+    // TODO: angleproject:3402
+    UNIMPLEMENTED();
+    return angle::Result::Stop;
+}
+
 angle::Result Context11::drawElementsInstanced(const gl::Context *context,
                                                gl::PrimitiveMode mode,
                                                GLsizei count,
@@ -347,6 +359,19 @@ angle::Result Context11::drawElementsInstanced(const gl::Context *context,
     return drawElementsImpl(context, mode, count, type, indices, instances, 0, 0);
 }
 
+angle::Result Context11::drawElementsInstancedBaseVertex(const gl::Context *context,
+                                                         gl::PrimitiveMode mode,
+                                                         GLsizei count,
+                                                         gl::DrawElementsType type,
+                                                         const void *indices,
+                                                         GLsizei instances,
+                                                         GLint baseVertex)
+{
+    // TODO: angleproject:3402
+    UNIMPLEMENTED();
+    return angle::Result::Stop;
+}
+
 angle::Result Context11::drawElementsInstancedBaseVertexBaseInstance(const gl::Context *context,
                                                                      gl::PrimitiveMode mode,
                                                                      GLsizei count,
@@ -371,6 +396,20 @@ angle::Result Context11::drawRangeElements(const gl::Context *context,
     return drawElementsImpl(context, mode, count, type, indices, 0, 0, 0);
 }
 
+angle::Result Context11::drawRangeElementsBaseVertex(const gl::Context *context,
+                                                     gl::PrimitiveMode mode,
+                                                     GLuint start,
+                                                     GLuint end,
+                                                     GLsizei count,
+                                                     gl::DrawElementsType type,
+                                                     const void *indices,
+                                                     GLint baseVertex)
+{
+    // TODO: angleproject:3402
+    UNIMPLEMENTED();
+    return angle::Result::Stop;
+}
+
 angle::Result Context11::drawArraysIndirect(const gl::Context *context,
                                             gl::PrimitiveMode mode,
                                             const void *indirect)
diff --git a/src/libANGLE/renderer/d3d/d3d11/Context11.h b/src/libANGLE/renderer/d3d/d3d11/Context11.h
index 4f89a2a6f..33d9f88e1 100644
--- a/src/libANGLE/renderer/d3d/d3d11/Context11.h
+++ b/src/libANGLE/renderer/d3d/d3d11/Context11.h
@@ -100,12 +100,25 @@ class Context11 : public ContextD3D, public MultisampleTextureInitializer
                                GLsizei count,
                                gl::DrawElementsType type,
                                const void *indices) override;
+    angle::Result drawElementsBaseVertex(const gl::Context *context,
+                                         gl::PrimitiveMode mode,
+                                         GLsizei count,
+                                         gl::DrawElementsType type,
+                                         const void *indices,
+                                         GLint baseVertex) override;
     angle::Result drawElementsInstanced(const gl::Context *context,
                                         gl::PrimitiveMode mode,
                                         GLsizei count,
                                         gl::DrawElementsType type,
                                         const void *indices,
                                         GLsizei instances) override;
+    angle::Result drawElementsInstancedBaseVertex(const gl::Context *context,
+                                                  gl::PrimitiveMode mode,
+                                                  GLsizei count,
+                                                  gl::DrawElementsType type,
+                                                  const void *indices,
+                                                  GLsizei instances,
+                                                  GLint baseVertex) override;
     angle::Result drawElementsInstancedBaseVertexBaseInstance(const gl::Context *context,
                                                               gl::PrimitiveMode mode,
                                                               GLsizei count,
@@ -121,6 +134,14 @@ class Context11 : public ContextD3D, public MultisampleTextureInitializer
                                     GLsizei count,
                                     gl::DrawElementsType type,
                                     const void *indices) override;
+    angle::Result drawRangeElementsBaseVertex(const gl::Context *context,
+                                              gl::PrimitiveMode mode,
+                                              GLuint start,
+                                              GLuint end,
+                                              GLsizei count,
+                                              gl::DrawElementsType type,
+                                              const void *indices,
+                                              GLint baseVertex) override;
     angle::Result drawArraysIndirect(const gl::Context *context,
                                      gl::PrimitiveMode mode,
                                      const void *indirect) override;
diff --git a/src/libANGLE/renderer/d3d/d3d9/Context9.cpp b/src/libANGLE/renderer/d3d/d3d9/Context9.cpp
index 5908fa7ce..1c603ce0b 100644
--- a/src/libANGLE/renderer/d3d/d3d9/Context9.cpp
+++ b/src/libANGLE/renderer/d3d/d3d9/Context9.cpp
@@ -199,6 +199,17 @@ angle::Result Context9::drawElements(const gl::Context *context,
     return mRenderer->genericDrawElements(context, mode, count, type, indices, 0);
 }
 
+angle::Result Context9::drawElementsBaseVertex(const gl::Context *context,
+                                               gl::PrimitiveMode mode,
+                                               GLsizei count,
+                                               gl::DrawElementsType type,
+                                               const void *indices,
+                                               GLint baseVertex)
+{
+    ANGLE_HR_UNREACHABLE(this);
+    return angle::Result::Continue;
+}
+
 angle::Result Context9::drawElementsInstanced(const gl::Context *context,
                                               gl::PrimitiveMode mode,
                                               GLsizei count,
@@ -209,6 +220,18 @@ angle::Result Context9::drawElementsInstanced(const gl::Context *context,
     return mRenderer->genericDrawElements(context, mode, count, type, indices, instances);
 }
 
+angle::Result Context9::drawElementsInstancedBaseVertex(const gl::Context *context,
+                                                        gl::PrimitiveMode mode,
+                                                        GLsizei count,
+                                                        gl::DrawElementsType type,
+                                                        const void *indices,
+                                                        GLsizei instances,
+                                                        GLint baseVertex)
+{
+    ANGLE_HR_UNREACHABLE(this);
+    return angle::Result::Continue;
+}
+
 angle::Result Context9::drawElementsInstancedBaseVertexBaseInstance(const gl::Context *context,
                                                                     gl::PrimitiveMode mode,
                                                                     GLsizei count,
@@ -233,6 +256,19 @@ angle::Result Context9::drawRangeElements(const gl::Context *context,
     return mRenderer->genericDrawElements(context, mode, count, type, indices, 0);
 }
 
+angle::Result Context9::drawRangeElementsBaseVertex(const gl::Context *context,
+                                                    gl::PrimitiveMode mode,
+                                                    GLuint start,
+                                                    GLuint end,
+                                                    GLsizei count,
+                                                    gl::DrawElementsType type,
+                                                    const void *indices,
+                                                    GLint baseVertex)
+{
+    ANGLE_HR_UNREACHABLE(this);
+    return angle::Result::Continue;
+}
+
 angle::Result Context9::drawArraysIndirect(const gl::Context *context,
                                            gl::PrimitiveMode mode,
                                            const void *indirect)
diff --git a/src/libANGLE/renderer/d3d/d3d9/Context9.h b/src/libANGLE/renderer/d3d/d3d9/Context9.h
index f0963d6f4..9f723a3a4 100644
--- a/src/libANGLE/renderer/d3d/d3d9/Context9.h
+++ b/src/libANGLE/renderer/d3d/d3d9/Context9.h
@@ -99,12 +99,25 @@ class Context9 : public ContextD3D
                                GLsizei count,
                                gl::DrawElementsType type,
                                const void *indices) override;
+    angle::Result drawElementsBaseVertex(const gl::Context *context,
+                                         gl::PrimitiveMode mode,
+                                         GLsizei count,
+                                         gl::DrawElementsType type,
+                                         const void *indices,
+                                         GLint baseVertex) override;
     angle::Result drawElementsInstanced(const gl::Context *context,
                                         gl::PrimitiveMode mode,
                                         GLsizei count,
                                         gl::DrawElementsType type,
                                         const void *indices,
                                         GLsizei instances) override;
+    angle::Result drawElementsInstancedBaseVertex(const gl::Context *context,
+                                                  gl::PrimitiveMode mode,
+                                                  GLsizei count,
+                                                  gl::DrawElementsType type,
+                                                  const void *indices,
+                                                  GLsizei instances,
+                                                  GLint baseVertex) override;
     angle::Result drawElementsInstancedBaseVertexBaseInstance(const gl::Context *context,
                                                               gl::PrimitiveMode mode,
                                                               GLsizei count,
@@ -120,6 +133,14 @@ class Context9 : public ContextD3D
                                     GLsizei count,
                                     gl::DrawElementsType type,
                                     const void *indices) override;
+    angle::Result drawRangeElementsBaseVertex(const gl::Context *context,
+                                              gl::PrimitiveMode mode,
+                                              GLuint start,
+                                              GLuint end,
+                                              GLsizei count,
+                                              gl::DrawElementsType type,
+                                              const void *indices,
+                                              GLint baseVertex) override;
     angle::Result drawArraysIndirect(const gl::Context *context,
                                      gl::PrimitiveMode mode,
                                      const void *indirect) override;
diff --git a/src/libANGLE/renderer/gl/ContextGL.cpp b/src/libANGLE/renderer/gl/ContextGL.cpp
index 6e4b2ca22..7c5ec13c7 100644
--- a/src/libANGLE/renderer/gl/ContextGL.cpp
+++ b/src/libANGLE/renderer/gl/ContextGL.cpp
@@ -469,6 +469,37 @@ angle::Result ContextGL::drawElements(const gl::Context *context,
     return angle::Result::Continue;
 }
 
+angle::Result ContextGL::drawElementsBaseVertex(const gl::Context *context,
+                                                gl::PrimitiveMode mode,
+                                                GLsizei count,
+                                                gl::DrawElementsType type,
+                                                const void *indices,
+                                                GLint baseVertex)
+{
+    const gl::State &glState    = context->getState();
+    const gl::Program *program  = glState.getProgram();
+    const bool usesMultiview    = program->usesMultiview();
+    const GLsizei instanceCount = usesMultiview ? program->getNumViews() : 0;
+    const void *drawIndexPtr    = nullptr;
+
+#if defined(ANGLE_STATE_VALIDATION_ENABLED)
+    validateState();
+#endif  // ANGLE_STATE_VALIDATION_ENABLED
+
+    ANGLE_TRY(setDrawElementsState(context, count, type, indices, instanceCount, &drawIndexPtr));
+    if (!usesMultiview)
+    {
+        getFunctions()->drawElementsBaseVertex(ToGLenum(mode), count, ToGLenum(type), drawIndexPtr,
+                                               baseVertex);
+    }
+    else
+    {
+        getFunctions()->drawElementsInstancedBaseVertex(ToGLenum(mode), count, ToGLenum(type),
+                                                        drawIndexPtr, instanceCount, baseVertex);
+    }
+    return angle::Result::Continue;
+}
+
 angle::Result ContextGL::drawElementsInstanced(const gl::Context *context,
                                                gl::PrimitiveMode mode,
                                                GLsizei count,
@@ -491,6 +522,29 @@ angle::Result ContextGL::drawElementsInstanced(const gl::Context *context,
     return angle::Result::Continue;
 }
 
+angle::Result ContextGL::drawElementsInstancedBaseVertex(const gl::Context *context,
+                                                         gl::PrimitiveMode mode,
+                                                         GLsizei count,
+                                                         gl::DrawElementsType type,
+                                                         const void *indices,
+                                                         GLsizei instances,
+                                                         GLint baseVertex)
+{
+    GLsizei adjustedInstanceCount = instances;
+    const gl::Program *program    = context->getState().getProgram();
+    if (program->usesMultiview())
+    {
+        adjustedInstanceCount *= program->getNumViews();
+    }
+    const void *drawIndexPointer = nullptr;
+
+    ANGLE_TRY(setDrawElementsState(context, count, type, indices, adjustedInstanceCount,
+                                   &drawIndexPointer));
+    getFunctions()->drawElementsInstancedBaseVertex(
+        ToGLenum(mode), count, ToGLenum(type), drawIndexPointer, adjustedInstanceCount, baseVertex);
+    return angle::Result::Continue;
+}
+
 angle::Result ContextGL::drawElementsInstancedBaseVertexBaseInstance(const gl::Context *context,
                                                                      gl::PrimitiveMode mode,
                                                                      GLsizei count,
@@ -565,6 +619,35 @@ angle::Result ContextGL::drawRangeElements(const gl::Context *context,
     return angle::Result::Continue;
 }
 
+angle::Result ContextGL::drawRangeElementsBaseVertex(const gl::Context *context,
+                                                     gl::PrimitiveMode mode,
+                                                     GLuint start,
+                                                     GLuint end,
+                                                     GLsizei count,
+                                                     gl::DrawElementsType type,
+                                                     const void *indices,
+                                                     GLint baseVertex)
+{
+    const gl::Program *program   = context->getState().getProgram();
+    const bool usesMultiview     = program->usesMultiview();
+    const GLsizei instanceCount  = usesMultiview ? program->getNumViews() : 0;
+    const void *drawIndexPointer = nullptr;
+
+    ANGLE_TRY(
+        setDrawElementsState(context, count, type, indices, instanceCount, &drawIndexPointer));
+    if (!usesMultiview)
+    {
+        getFunctions()->drawRangeElementsBaseVertex(ToGLenum(mode), start, end, count,
+                                                    ToGLenum(type), drawIndexPointer, baseVertex);
+    }
+    else
+    {
+        getFunctions()->drawElementsInstancedBaseVertex(
+            ToGLenum(mode), count, ToGLenum(type), drawIndexPointer, instanceCount, baseVertex);
+    }
+    return angle::Result::Continue;
+}
+
 angle::Result ContextGL::drawArraysIndirect(const gl::Context *context,
                                             gl::PrimitiveMode mode,
                                             const void *indirect)
diff --git a/src/libANGLE/renderer/gl/ContextGL.h b/src/libANGLE/renderer/gl/ContextGL.h
index 06b174fbc..977ea2ecb 100644
--- a/src/libANGLE/renderer/gl/ContextGL.h
+++ b/src/libANGLE/renderer/gl/ContextGL.h
@@ -114,12 +114,25 @@ class ContextGL : public ContextImpl
                                GLsizei count,
                                gl::DrawElementsType type,
                                const void *indices) override;
+    angle::Result drawElementsBaseVertex(const gl::Context *context,
+                                         gl::PrimitiveMode mode,
+                                         GLsizei count,
+                                         gl::DrawElementsType type,
+                                         const void *indices,
+                                         GLint baseVertex) override;
     angle::Result drawElementsInstanced(const gl::Context *context,
                                         gl::PrimitiveMode mode,
                                         GLsizei count,
                                         gl::DrawElementsType type,
                                         const void *indices,
                                         GLsizei instances) override;
+    angle::Result drawElementsInstancedBaseVertex(const gl::Context *context,
+                                                  gl::PrimitiveMode mode,
+                                                  GLsizei count,
+                                                  gl::DrawElementsType type,
+                                                  const void *indices,
+                                                  GLsizei instanceCount,
+                                                  GLint baseVertex) override;
     angle::Result drawElementsInstancedBaseVertexBaseInstance(const gl::Context *context,
                                                               gl::PrimitiveMode mode,
                                                               GLsizei count,
@@ -135,6 +148,14 @@ class ContextGL : public ContextImpl
                                     GLsizei count,
                                     gl::DrawElementsType type,
                                     const void *indices) override;
+    angle::Result drawRangeElementsBaseVertex(const gl::Context *context,
+                                              gl::PrimitiveMode mode,
+                                              GLuint start,
+                                              GLuint end,
+                                              GLsizei count,
+                                              gl::DrawElementsType type,
+                                              const void *indices,
+                                              GLint baseVertex) override;
     angle::Result drawArraysIndirect(const gl::Context *context,
                                      gl::PrimitiveMode mode,
                                      const void *indirect) override;
diff --git a/src/libANGLE/renderer/gl/renderergl_utils.cpp b/src/libANGLE/renderer/gl/renderergl_utils.cpp
index d9b635ef4..8b652fa9c 100644
--- a/src/libANGLE/renderer/gl/renderergl_utils.cpp
+++ b/src/libANGLE/renderer/gl/renderergl_utils.cpp
@@ -1421,6 +1421,16 @@ void GenerateCaps(const FunctionsGL *functions,
         functions->hasGLESExtension("GL_OES_draw_elements_base_vertex") ||
         functions->hasGLESExtension("GL_EXT_draw_elements_base_vertex");
 
+    // OES_draw_elements_base_vertex
+    extensions->drawElementsBaseVertexOES =
+        functions->isAtLeastGL(gl::Version(3, 2)) || functions->isAtLeastGLES(gl::Version(3, 2)) ||
+        functions->hasGLESExtension("GL_OES_draw_elements_base_vertex");
+
+    // EXT_draw_elements_base_vertex
+    extensions->drawElementsBaseVertexEXT =
+        functions->isAtLeastGL(gl::Version(3, 2)) || functions->isAtLeastGLES(gl::Version(3, 2)) ||
+        functions->hasGLESExtension("GL_EXT_draw_elements_base_vertex");
+
     // ANGLE_compressed_texture_etc
     // Expose this extension only when we support the formats or we're running on top of a native
     // ES driver.
diff --git a/src/libANGLE/renderer/metal/ContextMtl.h b/src/libANGLE/renderer/metal/ContextMtl.h
index a8738e7f5..e4fe2504a 100644
--- a/src/libANGLE/renderer/metal/ContextMtl.h
+++ b/src/libANGLE/renderer/metal/ContextMtl.h
@@ -64,12 +64,25 @@ class ContextMtl : public ContextImpl, public mtl::Context
                                GLsizei count,
                                gl::DrawElementsType type,
                                const void *indices) override;
+    angle::Result drawElementsBaseVertex(const gl::Context *context,
+                                         gl::PrimitiveMode mode,
+                                         GLsizei count,
+                                         gl::DrawElementsType type,
+                                         const void *indices,
+                                         GLint baseVertex) override;
     angle::Result drawElementsInstanced(const gl::Context *context,
                                         gl::PrimitiveMode mode,
                                         GLsizei count,
                                         gl::DrawElementsType type,
                                         const void *indices,
                                         GLsizei instanceCount) override;
+    angle::Result drawElementsInstancedBaseVertex(const gl::Context *context,
+                                                  gl::PrimitiveMode mode,
+                                                  GLsizei count,
+                                                  gl::DrawElementsType type,
+                                                  const void *indices,
+                                                  GLsizei instanceCount,
+                                                  GLint baseVertex) override;
     angle::Result drawElementsInstancedBaseVertexBaseInstance(const gl::Context *context,
                                                               gl::PrimitiveMode mode,
                                                               GLsizei count,
@@ -85,6 +98,14 @@ class ContextMtl : public ContextImpl, public mtl::Context
                                     GLsizei count,
                                     gl::DrawElementsType type,
                                     const void *indices) override;
+    angle::Result drawRangeElementsBaseVertex(const gl::Context *context,
+                                              gl::PrimitiveMode mode,
+                                              GLuint start,
+                                              GLuint end,
+                                              GLsizei count,
+                                              gl::DrawElementsType type,
+                                              const void *indices,
+                                              GLint baseVertex) override;
     angle::Result drawArraysIndirect(const gl::Context *context,
                                      gl::PrimitiveMode mode,
                                      const void *indirect) override;
diff --git a/src/libANGLE/renderer/metal/ContextMtl.mm b/src/libANGLE/renderer/metal/ContextMtl.mm
index 726f9ece4..cba88e205 100644
--- a/src/libANGLE/renderer/metal/ContextMtl.mm
+++ b/src/libANGLE/renderer/metal/ContextMtl.mm
@@ -302,6 +302,17 @@ angle::Result ContextMtl::drawElements(const gl::Context *context,
 
     return angle::Result::Continue;
 }
+angle::Result ContextMtl::drawElementsBaseVertex(const gl::Context *context,
+                                                 gl::PrimitiveMode mode,
+                                                 GLsizei count,
+                                                 gl::DrawElementsType type,
+                                                 const void *indices,
+                                                 GLint baseVertex)
+{
+    // NOTE(hqle): ES 3.2
+    UNIMPLEMENTED();
+    return angle::Result::Stop;
+}
 angle::Result ContextMtl::drawElementsInstanced(const gl::Context *context,
                                                 gl::PrimitiveMode mode,
                                                 GLsizei count,
@@ -313,6 +324,18 @@ angle::Result ContextMtl::drawElementsInstanced(const gl::Context *context,
     UNIMPLEMENTED();
     return angle::Result::Stop;
 }
+angle::Result ContextMtl::drawElementsInstancedBaseVertex(const gl::Context *context,
+                                                          gl::PrimitiveMode mode,
+                                                          GLsizei count,
+                                                          gl::DrawElementsType type,
+                                                          const void *indices,
+                                                          GLsizei instanceCount,
+                                                          GLint baseVertex)
+{
+    // NOTE(hqle): ES 3.2
+    UNIMPLEMENTED();
+    return angle::Result::Stop;
+}
 angle::Result ContextMtl::drawElementsInstancedBaseVertexBaseInstance(const gl::Context *context,
                                                                       gl::PrimitiveMode mode,
                                                                       GLsizei count,
@@ -337,6 +360,19 @@ angle::Result ContextMtl::drawRangeElements(const gl::Context *context,
     UNIMPLEMENTED();
     return angle::Result::Stop;
 }
+angle::Result ContextMtl::drawRangeElementsBaseVertex(const gl::Context *context,
+                                                      gl::PrimitiveMode mode,
+                                                      GLuint start,
+                                                      GLuint end,
+                                                      GLsizei count,
+                                                      gl::DrawElementsType type,
+                                                      const void *indices,
+                                                      GLint baseVertex)
+{
+    // NOTE(hqle): ES 3.2
+    UNIMPLEMENTED();
+    return angle::Result::Stop;
+}
 angle::Result ContextMtl::drawArraysIndirect(const gl::Context *context,
                                              gl::PrimitiveMode mode,
                                              const void *indirect)
diff --git a/src/libANGLE/renderer/null/ContextNULL.cpp b/src/libANGLE/renderer/null/ContextNULL.cpp
index 70669975a..655898406 100644
--- a/src/libANGLE/renderer/null/ContextNULL.cpp
+++ b/src/libANGLE/renderer/null/ContextNULL.cpp
@@ -159,6 +159,16 @@ angle::Result ContextNULL::drawElements(const gl::Context *context,
     return angle::Result::Continue;
 }
 
+angle::Result ContextNULL::drawElementsBaseVertex(const gl::Context *context,
+                                                  gl::PrimitiveMode mode,
+                                                  GLsizei count,
+                                                  gl::DrawElementsType type,
+                                                  const void *indices,
+                                                  GLint baseVertex)
+{
+    return angle::Result::Continue;
+}
+
 angle::Result ContextNULL::drawElementsInstanced(const gl::Context *context,
                                                  gl::PrimitiveMode mode,
                                                  GLsizei count,
@@ -169,6 +179,17 @@ angle::Result ContextNULL::drawElementsInstanced(const gl::Context *context,
     return angle::Result::Continue;
 }
 
+angle::Result ContextNULL::drawElementsInstancedBaseVertex(const gl::Context *context,
+                                                           gl::PrimitiveMode mode,
+                                                           GLsizei count,
+                                                           gl::DrawElementsType type,
+                                                           const void *indices,
+                                                           GLsizei instances,
+                                                           GLint baseVertex)
+{
+    return angle::Result::Continue;
+}
+
 angle::Result ContextNULL::drawElementsInstancedBaseVertexBaseInstance(const gl::Context *context,
                                                                        gl::PrimitiveMode mode,
                                                                        GLsizei count,
@@ -192,6 +213,18 @@ angle::Result ContextNULL::drawRangeElements(const gl::Context *context,
     return angle::Result::Continue;
 }
 
+angle::Result ContextNULL::drawRangeElementsBaseVertex(const gl::Context *context,
+                                                       gl::PrimitiveMode mode,
+                                                       GLuint start,
+                                                       GLuint end,
+                                                       GLsizei count,
+                                                       gl::DrawElementsType type,
+                                                       const void *indices,
+                                                       GLint baseVertex)
+{
+    return angle::Result::Continue;
+}
+
 angle::Result ContextNULL::drawArraysIndirect(const gl::Context *context,
                                               gl::PrimitiveMode mode,
                                               const void *indirect)
diff --git a/src/libANGLE/renderer/null/ContextNULL.h b/src/libANGLE/renderer/null/ContextNULL.h
index f929da801..57250bdcc 100644
--- a/src/libANGLE/renderer/null/ContextNULL.h
+++ b/src/libANGLE/renderer/null/ContextNULL.h
@@ -66,12 +66,25 @@ class ContextNULL : public ContextImpl
                                GLsizei count,
                                gl::DrawElementsType type,
                                const void *indices) override;
+    angle::Result drawElementsBaseVertex(const gl::Context *context,
+                                         gl::PrimitiveMode mode,
+                                         GLsizei count,
+                                         gl::DrawElementsType type,
+                                         const void *indices,
+                                         GLint baseVertex) override;
     angle::Result drawElementsInstanced(const gl::Context *context,
                                         gl::PrimitiveMode mode,
                                         GLsizei count,
                                         gl::DrawElementsType type,
                                         const void *indices,
                                         GLsizei instances) override;
+    angle::Result drawElementsInstancedBaseVertex(const gl::Context *context,
+                                                  gl::PrimitiveMode mode,
+                                                  GLsizei count,
+                                                  gl::DrawElementsType type,
+                                                  const void *indices,
+                                                  GLsizei instances,
+                                                  GLint baseVertex) override;
     angle::Result drawElementsInstancedBaseVertexBaseInstance(const gl::Context *context,
                                                               gl::PrimitiveMode mode,
                                                               GLsizei count,
@@ -87,6 +100,14 @@ class ContextNULL : public ContextImpl
                                     GLsizei count,
                                     gl::DrawElementsType type,
                                     const void *indices) override;
+    angle::Result drawRangeElementsBaseVertex(const gl::Context *context,
+                                              gl::PrimitiveMode mode,
+                                              GLuint start,
+                                              GLuint end,
+                                              GLsizei count,
+                                              gl::DrawElementsType type,
+                                              const void *indices,
+                                              GLint baseVertex) override;
     angle::Result drawArraysIndirect(const gl::Context *context,
                                      gl::PrimitiveMode mode,
                                      const void *indirect) override;
diff --git a/src/libANGLE/renderer/vulkan/ContextVk.cpp b/src/libANGLE/renderer/vulkan/ContextVk.cpp
index 13cedfbd4..e23a9482b 100644
--- a/src/libANGLE/renderer/vulkan/ContextVk.cpp
+++ b/src/libANGLE/renderer/vulkan/ContextVk.cpp
@@ -1606,7 +1606,7 @@ angle::Result ContextVk::drawArrays(const gl::Context *context,
         uint32_t numIndices;
         ANGLE_TRY(setupLineLoopDraw(context, mode, first, count, gl::DrawElementsType::InvalidEnum,
                                     nullptr, &commandBuffer, &numIndices));
-        vk::LineLoopHelper::Draw(numIndices, commandBuffer);
+        vk::LineLoopHelper::Draw(numIndices, 0, commandBuffer);
     }
     else
     {
@@ -1683,7 +1683,7 @@ angle::Result ContextVk::drawElements(const gl::Context *context,
         uint32_t indexCount;
         ANGLE_TRY(
             setupLineLoopDraw(context, mode, 0, count, type, indices, &commandBuffer, &indexCount));
-        vk::LineLoopHelper::Draw(indexCount, commandBuffer);
+        vk::LineLoopHelper::Draw(indexCount, 0, commandBuffer);
     }
     else
     {
@@ -1694,6 +1694,30 @@ angle::Result ContextVk::drawElements(const gl::Context *context,
     return angle::Result::Continue;
 }
 
+angle::Result ContextVk::drawElementsBaseVertex(const gl::Context *context,
+                                                gl::PrimitiveMode mode,
+                                                GLsizei count,
+                                                gl::DrawElementsType type,
+                                                const void *indices,
+                                                GLint baseVertex)
+{
+    vk::CommandBuffer *commandBuffer = nullptr;
+    if (mode == gl::PrimitiveMode::LineLoop)
+    {
+        uint32_t indexCount;
+        ANGLE_TRY(
+            setupLineLoopDraw(context, mode, 0, count, type, indices, &commandBuffer, &indexCount));
+        vk::LineLoopHelper::Draw(indexCount, baseVertex, commandBuffer);
+    }
+    else
+    {
+        ANGLE_TRY(setupIndexedDraw(context, mode, count, 1, type, indices, &commandBuffer));
+        commandBuffer->drawIndexedBaseVertex(count, baseVertex);
+    }
+
+    return angle::Result::Continue;
+}
+
 angle::Result ContextVk::drawElementsInstanced(const gl::Context *context,
                                                gl::PrimitiveMode mode,
                                                GLsizei count,
@@ -1719,6 +1743,32 @@ angle::Result ContextVk::drawElementsInstanced(const gl::Context *context,
     return angle::Result::Continue;
 }
 
+angle::Result ContextVk::drawElementsInstancedBaseVertex(const gl::Context *context,
+                                                         gl::PrimitiveMode mode,
+                                                         GLsizei count,
+                                                         gl::DrawElementsType type,
+                                                         const void *indices,
+                                                         GLsizei instances,
+                                                         GLint baseVertex)
+{
+    vk::CommandBuffer *commandBuffer = nullptr;
+
+    if (mode == gl::PrimitiveMode::LineLoop)
+    {
+        uint32_t indexCount;
+        ANGLE_TRY(
+            setupLineLoopDraw(context, mode, 0, count, type, indices, &commandBuffer, &indexCount));
+        count = indexCount;
+    }
+    else
+    {
+        ANGLE_TRY(setupIndexedDraw(context, mode, count, instances, type, indices, &commandBuffer));
+    }
+
+    commandBuffer->drawIndexedInstancedBaseVertex(count, instances, baseVertex);
+    return angle::Result::Continue;
+}
+
 angle::Result ContextVk::drawElementsInstancedBaseVertexBaseInstance(const gl::Context *context,
                                                                      gl::PrimitiveMode mode,
                                                                      GLsizei count,
@@ -1757,6 +1807,18 @@ angle::Result ContextVk::drawRangeElements(const gl::Context *context,
     return drawElements(context, mode, count, type, indices);
 }
 
+angle::Result ContextVk::drawRangeElementsBaseVertex(const gl::Context *context,
+                                                     gl::PrimitiveMode mode,
+                                                     GLuint start,
+                                                     GLuint end,
+                                                     GLsizei count,
+                                                     gl::DrawElementsType type,
+                                                     const void *indices,
+                                                     GLint baseVertex)
+{
+    return drawElementsBaseVertex(context, mode, count, type, indices, baseVertex);
+}
+
 VkDevice ContextVk::getDevice() const
 {
     return mRenderer->getDevice();
diff --git a/src/libANGLE/renderer/vulkan/ContextVk.h b/src/libANGLE/renderer/vulkan/ContextVk.h
index c6fb7c249..83f6039e7 100644
--- a/src/libANGLE/renderer/vulkan/ContextVk.h
+++ b/src/libANGLE/renderer/vulkan/ContextVk.h
@@ -130,12 +130,25 @@ class ContextVk : public ContextImpl, public vk::Context, public vk::RenderPassO
                                GLsizei count,
                                gl::DrawElementsType type,
                                const void *indices) override;
+    angle::Result drawElementsBaseVertex(const gl::Context *context,
+                                         gl::PrimitiveMode mode,
+                                         GLsizei count,
+                                         gl::DrawElementsType type,
+                                         const void *indices,
+                                         GLint baseVertex) override;
     angle::Result drawElementsInstanced(const gl::Context *context,
                                         gl::PrimitiveMode mode,
                                         GLsizei count,
                                         gl::DrawElementsType type,
                                         const void *indices,
                                         GLsizei instanceCount) override;
+    angle::Result drawElementsInstancedBaseVertex(const gl::Context *context,
+                                                  gl::PrimitiveMode mode,
+                                                  GLsizei count,
+                                                  gl::DrawElementsType type,
+                                                  const void *indices,
+                                                  GLsizei instanceCount,
+                                                  GLint baseVertex) override;
     angle::Result drawElementsInstancedBaseVertexBaseInstance(const gl::Context *context,
                                                               gl::PrimitiveMode mode,
                                                               GLsizei count,
@@ -151,6 +164,14 @@ class ContextVk : public ContextImpl, public vk::Context, public vk::RenderPassO
                                     GLsizei count,
                                     gl::DrawElementsType type,
                                     const void *indices) override;
+    angle::Result drawRangeElementsBaseVertex(const gl::Context *context,
+                                              gl::PrimitiveMode mode,
+                                              GLuint start,
+                                              GLuint end,
+                                              GLsizei count,
+                                              gl::DrawElementsType type,
+                                              const void *indices,
+                                              GLint baseVertex) override;
     angle::Result drawArraysIndirect(const gl::Context *context,
                                      gl::PrimitiveMode mode,
                                      const void *indirect) override;
diff --git a/src/libANGLE/renderer/vulkan/SecondaryCommandBuffer.cpp b/src/libANGLE/renderer/vulkan/SecondaryCommandBuffer.cpp
index 0ec910ed1..e70553096 100644
--- a/src/libANGLE/renderer/vulkan/SecondaryCommandBuffer.cpp
+++ b/src/libANGLE/renderer/vulkan/SecondaryCommandBuffer.cpp
@@ -180,6 +180,13 @@ void SecondaryCommandBuffer::executeCommands(VkCommandBuffer cmdBuffer)
                     vkCmdDrawIndexed(cmdBuffer, params->indexCount, 1, 0, 0, 0);
                     break;
                 }
+                case CommandID::DrawIndexedBaseVertex:
+                {
+                    const DrawIndexedBaseVertexParams *params =
+                        getParamPtr<DrawIndexedBaseVertexParams>(currentCommand);
+                    vkCmdDrawIndexed(cmdBuffer, params->indexCount, 1, 0, params->vertexOffset, 0);
+                    break;
+                }
                 case CommandID::DrawIndexedInstanced:
                 {
                     const DrawIndexedInstancedParams *params =
@@ -187,6 +194,14 @@ void SecondaryCommandBuffer::executeCommands(VkCommandBuffer cmdBuffer)
                     vkCmdDrawIndexed(cmdBuffer, params->indexCount, params->instanceCount, 0, 0, 0);
                     break;
                 }
+                case CommandID::DrawIndexedInstancedBaseVertex:
+                {
+                    const DrawIndexedInstancedBaseVertexParams *params =
+                        getParamPtr<DrawIndexedInstancedBaseVertexParams>(currentCommand);
+                    vkCmdDrawIndexed(cmdBuffer, params->indexCount, params->instanceCount, 0,
+                                     params->vertexOffset, 0);
+                    break;
+                }
                 case CommandID::DrawIndexedInstancedBaseVertexBaseInstance:
                 {
                     const DrawIndexedInstancedBaseVertexBaseInstanceParams *params =
@@ -444,9 +459,15 @@ std::string SecondaryCommandBuffer::dumpCommands(const char *separator) const
                 case CommandID::DrawIndexed:
                     result += "DrawIndexed";
                     break;
+                case CommandID::DrawIndexedBaseVertex:
+                    result += "DrawIndexedBaseVertex";
+                    break;
                 case CommandID::DrawIndexedInstanced:
                     result += "DrawIndexedInstanced";
                     break;
+                case CommandID::DrawIndexedInstancedBaseVertex:
+                    result += "DrawIndexedInstancedBaseVertex";
+                    break;
                 case CommandID::DrawInstanced:
                     result += "DrawInstanced";
                     break;
diff --git a/src/libANGLE/renderer/vulkan/SecondaryCommandBuffer.h b/src/libANGLE/renderer/vulkan/SecondaryCommandBuffer.h
index cc3704668..19c2c9a1c 100644
--- a/src/libANGLE/renderer/vulkan/SecondaryCommandBuffer.h
+++ b/src/libANGLE/renderer/vulkan/SecondaryCommandBuffer.h
@@ -47,7 +47,9 @@ enum class CommandID : uint16_t
     DispatchIndirect,
     Draw,
     DrawIndexed,
+    DrawIndexedBaseVertex,
     DrawIndexedInstanced,
+    DrawIndexedInstancedBaseVertex,
     DrawIndexedInstancedBaseVertexBaseInstance,
     DrawInstanced,
     DrawInstancedBaseInstance,
@@ -215,6 +217,13 @@ struct DrawIndexedParams
 };
 VERIFY_4_BYTE_ALIGNMENT(DrawIndexedParams)
 
+struct DrawIndexedBaseVertexParams
+{
+    uint32_t indexCount;
+    uint32_t vertexOffset;
+};
+VERIFY_4_BYTE_ALIGNMENT(DrawIndexedBaseVertexParams)
+
 struct DrawIndexedInstancedParams
 {
     uint32_t indexCount;
@@ -222,6 +231,14 @@ struct DrawIndexedInstancedParams
 };
 VERIFY_4_BYTE_ALIGNMENT(DrawIndexedInstancedParams)
 
+struct DrawIndexedInstancedBaseVertexParams
+{
+    uint32_t indexCount;
+    uint32_t instanceCount;
+    uint32_t vertexOffset;
+};
+VERIFY_4_BYTE_ALIGNMENT(DrawIndexedInstancedBaseVertexParams)
+
 struct DrawIndexedInstancedBaseVertexBaseInstanceParams
 {
     uint32_t indexCount;
@@ -478,8 +495,12 @@ class SecondaryCommandBuffer final : angle::NonCopyable
     void draw(uint32_t vertexCount, uint32_t firstVertex);
 
     void drawIndexed(uint32_t indexCount);
+    void drawIndexedBaseVertex(uint32_t indexCount, uint32_t vertexOffset);
 
     void drawIndexedInstanced(uint32_t indexCount, uint32_t instanceCount);
+    void drawIndexedInstancedBaseVertex(uint32_t indexCount,
+                                        uint32_t instanceCount,
+                                        uint32_t vertexOffset);
     void drawIndexedInstancedBaseVertexBaseInstance(uint32_t indexCount,
                                                     uint32_t instanceCount,
                                                     uint32_t firstIndex,
@@ -920,6 +941,15 @@ ANGLE_INLINE void SecondaryCommandBuffer::drawIndexed(uint32_t indexCount)
     paramStruct->indexCount        = indexCount;
 }
 
+ANGLE_INLINE void SecondaryCommandBuffer::drawIndexedBaseVertex(uint32_t indexCount,
+                                                                uint32_t vertexOffset)
+{
+    DrawIndexedBaseVertexParams *paramStruct =
+        initCommand<DrawIndexedBaseVertexParams>(CommandID::DrawIndexedBaseVertex);
+    paramStruct->indexCount   = indexCount;
+    paramStruct->vertexOffset = vertexOffset;
+}
+
 ANGLE_INLINE void SecondaryCommandBuffer::drawIndexedInstanced(uint32_t indexCount,
                                                                uint32_t instanceCount)
 {
@@ -928,6 +958,19 @@ ANGLE_INLINE void SecondaryCommandBuffer::drawIndexedInstanced(uint32_t indexCou
     paramStruct->indexCount    = indexCount;
     paramStruct->instanceCount = instanceCount;
 }
+
+ANGLE_INLINE void SecondaryCommandBuffer::drawIndexedInstancedBaseVertex(uint32_t indexCount,
+                                                                         uint32_t instanceCount,
+                                                                         uint32_t vertexOffset)
+{
+    DrawIndexedInstancedBaseVertexParams *paramStruct =
+        initCommand<DrawIndexedInstancedBaseVertexParams>(
+            CommandID::DrawIndexedInstancedBaseVertex);
+    paramStruct->indexCount    = indexCount;
+    paramStruct->instanceCount = instanceCount;
+    paramStruct->vertexOffset  = vertexOffset;
+}
+
 ANGLE_INLINE void SecondaryCommandBuffer::drawIndexedInstancedBaseVertexBaseInstance(
     uint32_t indexCount,
     uint32_t instanceCount,
diff --git a/src/libANGLE/renderer/vulkan/vk_caps_utils.cpp b/src/libANGLE/renderer/vulkan/vk_caps_utils.cpp
index 8318bb299..7a93272f1 100644
--- a/src/libANGLE/renderer/vulkan/vk_caps_utils.cpp
+++ b/src/libANGLE/renderer/vulkan/vk_caps_utils.cpp
@@ -72,6 +72,10 @@ void RendererVk::ensureCapsInitialized() const
     // Enable ANGLE_base_vertex_base_instance
     mNativeExtensions.baseVertexBaseInstance = true;
 
+    // Enable OES/EXT_draw_elements_base_vertex
+    mNativeExtensions.drawElementsBaseVertexOES = true;
+    mNativeExtensions.drawElementsBaseVertexEXT = true;
+
     // Enable EXT_blend_minmax
     mNativeExtensions.blendMinMax = true;
 
diff --git a/src/libANGLE/renderer/vulkan/vk_helpers.cpp b/src/libANGLE/renderer/vulkan/vk_helpers.cpp
index bcc37ffb6..038b4a11f 100644
--- a/src/libANGLE/renderer/vulkan/vk_helpers.cpp
+++ b/src/libANGLE/renderer/vulkan/vk_helpers.cpp
@@ -1388,10 +1388,10 @@ void LineLoopHelper::destroy(VkDevice device)
 }
 
 // static
-void LineLoopHelper::Draw(uint32_t count, CommandBuffer *commandBuffer)
+void LineLoopHelper::Draw(uint32_t count, uint32_t baseVertex, CommandBuffer *commandBuffer)
 {
     // Our first index is always 0 because that's how we set it up in createIndexBuffer*.
-    commandBuffer->drawIndexed(count);
+    commandBuffer->drawIndexedBaseVertex(count, baseVertex);
 }
 
 // BufferHelper implementation.
diff --git a/src/libANGLE/renderer/vulkan/vk_helpers.h b/src/libANGLE/renderer/vulkan/vk_helpers.h
index ae974f251..649d13321 100644
--- a/src/libANGLE/renderer/vulkan/vk_helpers.h
+++ b/src/libANGLE/renderer/vulkan/vk_helpers.h
@@ -449,7 +449,7 @@ class LineLoopHelper final : angle::NonCopyable
     void release(ContextVk *contextVk);
     void destroy(VkDevice device);
 
-    static void Draw(uint32_t count, CommandBuffer *commandBuffer);
+    static void Draw(uint32_t count, uint32_t baseVertex, CommandBuffer *commandBuffer);
 
   private:
     DynamicBuffer mDynamicIndexBuffer;
diff --git a/src/libANGLE/renderer/vulkan/vk_wrapper.h b/src/libANGLE/renderer/vulkan/vk_wrapper.h
index c9fe77bd4..5cfc8f9c6 100644
--- a/src/libANGLE/renderer/vulkan/vk_wrapper.h
+++ b/src/libANGLE/renderer/vulkan/vk_wrapper.h
@@ -271,7 +271,11 @@ class CommandBuffer : public WrappedObject<CommandBuffer, VkCommandBuffer>
                      int32_t vertexOffset,
                      uint32_t firstInstance);
     void drawIndexed(uint32_t indexCount);
+    void drawIndexedBaseVertex(uint32_t indexCount, uint32_t vertexOffset);
     void drawIndexedInstanced(uint32_t indexCount, uint32_t instanceCount);
+    void drawIndexedInstancedBaseVertex(uint32_t indexCount,
+                                        uint32_t instanceCount,
+                                        uint32_t vertexOffset);
     void drawIndexedInstancedBaseVertexBaseInstance(uint32_t indexCount,
                                                     uint32_t instanceCount,
                                                     uint32_t firstIndex,
@@ -958,12 +962,26 @@ ANGLE_INLINE void CommandBuffer::drawIndexed(uint32_t indexCount)
     vkCmdDrawIndexed(mHandle, indexCount, 1, 0, 0, 0);
 }
 
+ANGLE_INLINE void CommandBuffer::drawIndexedBaseVertex(uint32_t indexCount, uint32_t vertexOffset)
+{
+    ASSERT(valid());
+    vkCmdDrawIndexed(mHandle, indexCount, 1, 0, vertexOffset, 0);
+}
+
 ANGLE_INLINE void CommandBuffer::drawIndexedInstanced(uint32_t indexCount, uint32_t instanceCount)
 {
     ASSERT(valid());
     vkCmdDrawIndexed(mHandle, indexCount, instanceCount, 0, 0, 0);
 }
 
+ANGLE_INLINE void CommandBuffer::drawIndexedInstancedBaseVertex(uint32_t indexCount,
+                                                                uint32_t instanceCount,
+                                                                uint32_t vertexOffset)
+{
+    ASSERT(valid());
+    vkCmdDrawIndexed(mHandle, indexCount, instanceCount, 0, vertexOffset, 0);
+}
+
 ANGLE_INLINE void CommandBuffer::drawIndexedInstancedBaseVertexBaseInstance(uint32_t indexCount,
                                                                             uint32_t instanceCount,
                                                                             uint32_t firstIndex,
diff --git a/src/libANGLE/validationES32.cpp b/src/libANGLE/validationES32.cpp
index 8a65450bd..7045bd686 100644
--- a/src/libANGLE/validationES32.cpp
+++ b/src/libANGLE/validationES32.cpp
@@ -118,35 +118,81 @@ bool ValidateDisablei(Context *context, GLenum target, GLuint index)
 }
 
 bool ValidateDrawElementsBaseVertex(Context *context,
-                                    GLenum mode,
+                                    PrimitiveMode mode,
                                     GLsizei count,
-                                    GLenum type,
+                                    DrawElementsType type,
                                     const void *indices,
                                     GLint basevertex)
 {
-    return true;
+    if (!context->getExtensions().drawElementsBaseVertexAny())
+    {
+        context->validationError(GL_INVALID_OPERATION, kExtensionNotEnabled);
+        return false;
+    }
+
+    return ValidateDrawElementsCommon(context, mode, count, type, indices, 1);
 }
 
 bool ValidateDrawElementsInstancedBaseVertex(Context *context,
-                                             GLenum mode,
+                                             PrimitiveMode mode,
                                              GLsizei count,
-                                             GLenum type,
+                                             DrawElementsType type,
                                              const void *indices,
                                              GLsizei instancecount,
                                              GLint basevertex)
 {
-    return true;
+    if (!context->getExtensions().drawElementsBaseVertexAny())
+    {
+        context->validationError(GL_INVALID_OPERATION, kExtensionNotEnabled);
+        return false;
+    }
+
+    return ValidateDrawElementsInstancedBase(context, mode, count, type, indices, instancecount);
 }
 
 bool ValidateDrawRangeElementsBaseVertex(Context *context,
-                                         GLenum mode,
+                                         PrimitiveMode mode,
                                          GLuint start,
                                          GLuint end,
                                          GLsizei count,
-                                         GLenum type,
+                                         DrawElementsType type,
                                          const void *indices,
                                          GLint basevertex)
 {
+    if (!context->getExtensions().drawElementsBaseVertexAny())
+    {
+        context->validationError(GL_INVALID_OPERATION, kExtensionNotEnabled);
+        return false;
+    }
+
+    if (end < start)
+    {
+        context->validationError(GL_INVALID_VALUE, kInvalidElementRange);
+        return false;
+    }
+
+    if (!ValidateDrawElementsCommon(context, mode, count, type, indices, 0))
+    {
+        return false;
+    }
+
+    // Skip range checks for no-op calls.
+    if (count <= 0)
+    {
+        return true;
+    }
+
+    // Note that resolving the index range is a bit slow. We should probably optimize this.
+    IndexRange indexRange;
+    ANGLE_VALIDATION_TRY(context->getState().getVertexArray()->getIndexRange(context, type, count,
+                                                                             indices, &indexRange));
+
+    if (indexRange.end > end || indexRange.start < start)
+    {
+        // GL spec says that behavior in this case is undefined - generating an error is fine.
+        context->validationError(GL_INVALID_OPERATION, kExceedsElementRange);
+        return false;
+    }
     return true;
 }
 
diff --git a/src/libANGLE/validationES32_autogen.h b/src/libANGLE/validationES32_autogen.h
index 86cdbfebd..07acd31ed 100644
--- a/src/libANGLE/validationES32_autogen.h
+++ b/src/libANGLE/validationES32_autogen.h
@@ -66,24 +66,24 @@ bool ValidateDebugMessageInsert(Context *context,
                                 const GLchar *buf);
 bool ValidateDisablei(Context *context, GLenum target, GLuint index);
 bool ValidateDrawElementsBaseVertex(Context *context,
-                                    GLenum mode,
+                                    PrimitiveMode modePacked,
                                     GLsizei count,
-                                    GLenum type,
+                                    DrawElementsType typePacked,
                                     const void *indices,
                                     GLint basevertex);
 bool ValidateDrawElementsInstancedBaseVertex(Context *context,
-                                             GLenum mode,
+                                             PrimitiveMode modePacked,
                                              GLsizei count,
-                                             GLenum type,
+                                             DrawElementsType typePacked,
                                              const void *indices,
                                              GLsizei instancecount,
                                              GLint basevertex);
 bool ValidateDrawRangeElementsBaseVertex(Context *context,
-                                         GLenum mode,
+                                         PrimitiveMode modePacked,
                                          GLuint start,
                                          GLuint end,
                                          GLsizei count,
-                                         GLenum type,
+                                         DrawElementsType typePacked,
                                          const void *indices,
                                          GLint basevertex);
 bool ValidateEnablei(Context *context, GLenum target, GLuint index);
diff --git a/src/libANGLE/validationESEXT.cpp b/src/libANGLE/validationESEXT.cpp
index 2aed04aef..1df2df7c0 100644
--- a/src/libANGLE/validationESEXT.cpp
+++ b/src/libANGLE/validationESEXT.cpp
@@ -125,4 +125,173 @@ bool ValidateGetRenderbufferImageANGLE(Context *context,
 
     return true;
 }
+
+bool ValidateDrawElementsBaseVertexEXT(Context *context,
+                                       PrimitiveMode mode,
+                                       GLsizei count,
+                                       DrawElementsType type,
+                                       const void *indices,
+                                       GLint basevertex)
+{
+    if (!context->getExtensions().drawElementsBaseVertexAny())
+    {
+        context->validationError(GL_INVALID_OPERATION, kExtensionNotEnabled);
+        return false;
+    }
+
+    return ValidateDrawElementsCommon(context, mode, count, type, indices, 1);
+}
+
+bool ValidateDrawElementsInstancedBaseVertexEXT(Context *context,
+                                                PrimitiveMode mode,
+                                                GLsizei count,
+                                                DrawElementsType type,
+                                                const void *indices,
+                                                GLsizei instancecount,
+                                                GLint basevertex)
+{
+    if (!context->getExtensions().drawElementsBaseVertexAny())
+    {
+        context->validationError(GL_INVALID_OPERATION, kExtensionNotEnabled);
+        return false;
+    }
+
+    return ValidateDrawElementsInstancedBase(context, mode, count, type, indices, instancecount);
+}
+
+bool ValidateDrawRangeElementsBaseVertexEXT(Context *context,
+                                            PrimitiveMode mode,
+                                            GLuint start,
+                                            GLuint end,
+                                            GLsizei count,
+                                            DrawElementsType type,
+                                            const void *indices,
+                                            GLint basevertex)
+{
+    if (!context->getExtensions().drawElementsBaseVertexAny())
+    {
+        context->validationError(GL_INVALID_OPERATION, kExtensionNotEnabled);
+        return false;
+    }
+
+    if (end < start)
+    {
+        context->validationError(GL_INVALID_VALUE, kInvalidElementRange);
+        return false;
+    }
+
+    if (!ValidateDrawElementsCommon(context, mode, count, type, indices, 0))
+    {
+        return false;
+    }
+
+    // Skip range checks for no-op calls.
+    if (count <= 0)
+    {
+        return true;
+    }
+
+    // Note that resolving the index range is a bit slow. We should probably optimize this.
+    IndexRange indexRange;
+    ANGLE_VALIDATION_TRY(context->getState().getVertexArray()->getIndexRange(context, type, count,
+                                                                             indices, &indexRange));
+
+    if (indexRange.end > end || indexRange.start < start)
+    {
+        // GL spec says that behavior in this case is undefined - generating an error is fine.
+        context->validationError(GL_INVALID_OPERATION, kExceedsElementRange);
+        return false;
+    }
+    return true;
+}
+
+bool ValidateMultiDrawElementsBaseVertexEXT(Context *context,
+                                            GLenum mode,
+                                            const GLsizei *count,
+                                            GLenum type,
+                                            const void *const *indices,
+                                            GLsizei drawcount,
+                                            const GLint *basevertex)
+{
+    return true;
+}
+
+bool ValidateDrawElementsBaseVertexOES(Context *context,
+                                       PrimitiveMode mode,
+                                       GLsizei count,
+                                       DrawElementsType type,
+                                       const void *indices,
+                                       GLint basevertex)
+{
+    if (!context->getExtensions().drawElementsBaseVertexAny())
+    {
+        context->validationError(GL_INVALID_OPERATION, kExtensionNotEnabled);
+        return false;
+    }
+
+    return ValidateDrawElementsCommon(context, mode, count, type, indices, 1);
+}
+
+bool ValidateDrawElementsInstancedBaseVertexOES(Context *context,
+                                                PrimitiveMode mode,
+                                                GLsizei count,
+                                                DrawElementsType type,
+                                                const void *indices,
+                                                GLsizei instancecount,
+                                                GLint basevertex)
+{
+    if (!context->getExtensions().drawElementsBaseVertexAny())
+    {
+        context->validationError(GL_INVALID_OPERATION, kExtensionNotEnabled);
+        return false;
+    }
+
+    return ValidateDrawElementsInstancedBase(context, mode, count, type, indices, instancecount);
+}
+
+bool ValidateDrawRangeElementsBaseVertexOES(Context *context,
+                                            PrimitiveMode mode,
+                                            GLuint start,
+                                            GLuint end,
+                                            GLsizei count,
+                                            DrawElementsType type,
+                                            const void *indices,
+                                            GLint basevertex)
+{
+    if (!context->getExtensions().drawElementsBaseVertexAny())
+    {
+        context->validationError(GL_INVALID_OPERATION, kExtensionNotEnabled);
+        return false;
+    }
+
+    if (end < start)
+    {
+        context->validationError(GL_INVALID_VALUE, kInvalidElementRange);
+        return false;
+    }
+
+    if (!ValidateDrawElementsCommon(context, mode, count, type, indices, 0))
+    {
+        return false;
+    }
+
+    // Skip range checks for no-op calls.
+    if (count <= 0)
+    {
+        return true;
+    }
+
+    // Note that resolving the index range is a bit slow. We should probably optimize this.
+    IndexRange indexRange;
+    ANGLE_VALIDATION_TRY(context->getState().getVertexArray()->getIndexRange(context, type, count,
+                                                                             indices, &indexRange));
+
+    if (indexRange.end > end || indexRange.start < start)
+    {
+        // GL spec says that behavior in this case is undefined - generating an error is fine.
+        context->validationError(GL_INVALID_OPERATION, kExceedsElementRange);
+        return false;
+    }
+    return true;
+}
 }  // namespace gl
diff --git a/src/libANGLE/validationESEXT_autogen.h b/src/libANGLE/validationESEXT_autogen.h
index f20128123..87a9fba92 100644
--- a/src/libANGLE/validationESEXT_autogen.h
+++ b/src/libANGLE/validationESEXT_autogen.h
@@ -848,6 +848,36 @@ bool ValidateQueryCounterEXT(Context *context, QueryID idPacked, QueryType targe
 // GL_EXT_draw_buffers
 bool ValidateDrawBuffersEXT(Context *context, GLsizei n, const GLenum *bufs);
 
+// GL_EXT_draw_elements_base_vertex
+bool ValidateDrawElementsBaseVertexEXT(Context *context,
+                                       PrimitiveMode modePacked,
+                                       GLsizei count,
+                                       DrawElementsType typePacked,
+                                       const void *indices,
+                                       GLint basevertex);
+bool ValidateDrawElementsInstancedBaseVertexEXT(Context *context,
+                                                PrimitiveMode modePacked,
+                                                GLsizei count,
+                                                DrawElementsType typePacked,
+                                                const void *indices,
+                                                GLsizei instancecount,
+                                                GLint basevertex);
+bool ValidateDrawRangeElementsBaseVertexEXT(Context *context,
+                                            PrimitiveMode modePacked,
+                                            GLuint start,
+                                            GLuint end,
+                                            GLsizei count,
+                                            DrawElementsType typePacked,
+                                            const void *indices,
+                                            GLint basevertex);
+bool ValidateMultiDrawElementsBaseVertexEXT(Context *context,
+                                            GLenum mode,
+                                            const GLsizei *count,
+                                            GLenum type,
+                                            const void *const *indices,
+                                            GLsizei primcount,
+                                            const GLint *basevertex);
+
 // GL_EXT_geometry_shader
 bool ValidateFramebufferTextureEXT(Context *context,
                                    GLenum target,
@@ -1116,6 +1146,29 @@ bool ValidateEGLImageTargetTexture2DOES(Context *context,
                                         TextureType targetPacked,
                                         GLeglImageOES image);
 
+// GL_OES_draw_elements_base_vertex
+bool ValidateDrawElementsBaseVertexOES(Context *context,
+                                       PrimitiveMode modePacked,
+                                       GLsizei count,
+                                       DrawElementsType typePacked,
+                                       const void *indices,
+                                       GLint basevertex);
+bool ValidateDrawElementsInstancedBaseVertexOES(Context *context,
+                                                PrimitiveMode modePacked,
+                                                GLsizei count,
+                                                DrawElementsType typePacked,
+                                                const void *indices,
+                                                GLsizei instancecount,
+                                                GLint basevertex);
+bool ValidateDrawRangeElementsBaseVertexOES(Context *context,
+                                            PrimitiveMode modePacked,
+                                            GLuint start,
+                                            GLuint end,
+                                            GLsizei count,
+                                            DrawElementsType typePacked,
+                                            const void *indices,
+                                            GLint basevertex);
+
 // GL_OES_draw_texture
 bool ValidateDrawTexfOES(Context *context,
                          GLfloat x,
diff --git a/src/libGL/entry_points_gl_3_2_autogen.cpp b/src/libGL/entry_points_gl_3_2_autogen.cpp
index 55fd3c22a..8ec968dd5 100644
--- a/src/libGL/entry_points_gl_3_2_autogen.cpp
+++ b/src/libGL/entry_points_gl_3_2_autogen.cpp
@@ -93,16 +93,18 @@ void GL_APIENTRY DrawElementsBaseVertex(GLenum mode,
 
     if (context)
     {
+        PrimitiveMode modePacked                      = FromGL<PrimitiveMode>(mode);
+        DrawElementsType typePacked                   = FromGL<DrawElementsType>(type);
         std::unique_lock<std::mutex> shareContextLock = GetShareGroupLock(context);
-        bool isCallValid =
-            (context->skipValidation() ||
-             ValidateDrawElementsBaseVertex(context, mode, count, type, indices, basevertex));
+        bool isCallValid                              = (context->skipValidation() ||
+                            ValidateDrawElementsBaseVertex(context, modePacked, count, typePacked,
+                                                           indices, basevertex));
         if (isCallValid)
         {
-            context->drawElementsBaseVertex(mode, count, type, indices, basevertex);
+            context->drawElementsBaseVertex(modePacked, count, typePacked, indices, basevertex);
         }
-        ANGLE_CAPTURE(DrawElementsBaseVertex, isCallValid, context, mode, count, type, indices,
-                      basevertex);
+        ANGLE_CAPTURE(DrawElementsBaseVertex, isCallValid, context, modePacked, count, typePacked,
+                      indices, basevertex);
     }
 }
 
@@ -123,17 +125,19 @@ void GL_APIENTRY DrawElementsInstancedBaseVertex(GLenum mode,
 
     if (context)
     {
+        PrimitiveMode modePacked                      = FromGL<PrimitiveMode>(mode);
+        DrawElementsType typePacked                   = FromGL<DrawElementsType>(type);
         std::unique_lock<std::mutex> shareContextLock = GetShareGroupLock(context);
-        bool isCallValid                              = (context->skipValidation() ||
-                            ValidateDrawElementsInstancedBaseVertex(
-                                context, mode, count, type, indices, instancecount, basevertex));
+        bool isCallValid = (context->skipValidation() || ValidateDrawElementsInstancedBaseVertex(
+                                                             context, modePacked, count, typePacked,
+                                                             indices, instancecount, basevertex));
         if (isCallValid)
         {
-            context->drawElementsInstancedBaseVertex(mode, count, type, indices, instancecount,
-                                                     basevertex);
+            context->drawElementsInstancedBaseVertex(modePacked, count, typePacked, indices,
+                                                     instancecount, basevertex);
         }
-        ANGLE_CAPTURE(DrawElementsInstancedBaseVertex, isCallValid, context, mode, count, type,
-                      indices, instancecount, basevertex);
+        ANGLE_CAPTURE(DrawElementsInstancedBaseVertex, isCallValid, context, modePacked, count,
+                      typePacked, indices, instancecount, basevertex);
     }
 }
 
@@ -154,17 +158,19 @@ void GL_APIENTRY DrawRangeElementsBaseVertex(GLenum mode,
 
     if (context)
     {
+        PrimitiveMode modePacked                      = FromGL<PrimitiveMode>(mode);
+        DrawElementsType typePacked                   = FromGL<DrawElementsType>(type);
         std::unique_lock<std::mutex> shareContextLock = GetShareGroupLock(context);
-        bool isCallValid                              = (context->skipValidation() ||
-                            ValidateDrawRangeElementsBaseVertex(context, mode, start, end, count,
-                                                                type, indices, basevertex));
+        bool isCallValid = (context->skipValidation() || ValidateDrawRangeElementsBaseVertex(
+                                                             context, modePacked, start, end, count,
+                                                             typePacked, indices, basevertex));
         if (isCallValid)
         {
-            context->drawRangeElementsBaseVertex(mode, start, end, count, type, indices,
+            context->drawRangeElementsBaseVertex(modePacked, start, end, count, typePacked, indices,
                                                  basevertex);
         }
-        ANGLE_CAPTURE(DrawRangeElementsBaseVertex, isCallValid, context, mode, start, end, count,
-                      type, indices, basevertex);
+        ANGLE_CAPTURE(DrawRangeElementsBaseVertex, isCallValid, context, modePacked, start, end,
+                      count, typePacked, indices, basevertex);
     }
 }
 
diff --git a/src/libGLESv2/entry_points_gles_3_2_autogen.cpp b/src/libGLESv2/entry_points_gles_3_2_autogen.cpp
index 780ce98a6..2087e9c7d 100644
--- a/src/libGLESv2/entry_points_gles_3_2_autogen.cpp
+++ b/src/libGLESv2/entry_points_gles_3_2_autogen.cpp
@@ -307,16 +307,18 @@ void GL_APIENTRY DrawElementsBaseVertex(GLenum mode,
 
     if (context)
     {
+        PrimitiveMode modePacked                      = FromGL<PrimitiveMode>(mode);
+        DrawElementsType typePacked                   = FromGL<DrawElementsType>(type);
         std::unique_lock<std::mutex> shareContextLock = GetShareGroupLock(context);
-        bool isCallValid =
-            (context->skipValidation() ||
-             ValidateDrawElementsBaseVertex(context, mode, count, type, indices, basevertex));
+        bool isCallValid                              = (context->skipValidation() ||
+                            ValidateDrawElementsBaseVertex(context, modePacked, count, typePacked,
+                                                           indices, basevertex));
         if (isCallValid)
         {
-            context->drawElementsBaseVertex(mode, count, type, indices, basevertex);
+            context->drawElementsBaseVertex(modePacked, count, typePacked, indices, basevertex);
         }
-        ANGLE_CAPTURE(DrawElementsBaseVertex, isCallValid, context, mode, count, type, indices,
-                      basevertex);
+        ANGLE_CAPTURE(DrawElementsBaseVertex, isCallValid, context, modePacked, count, typePacked,
+                      indices, basevertex);
     }
 }
 
@@ -337,17 +339,19 @@ void GL_APIENTRY DrawElementsInstancedBaseVertex(GLenum mode,
 
     if (context)
     {
+        PrimitiveMode modePacked                      = FromGL<PrimitiveMode>(mode);
+        DrawElementsType typePacked                   = FromGL<DrawElementsType>(type);
         std::unique_lock<std::mutex> shareContextLock = GetShareGroupLock(context);
-        bool isCallValid                              = (context->skipValidation() ||
-                            ValidateDrawElementsInstancedBaseVertex(
-                                context, mode, count, type, indices, instancecount, basevertex));
+        bool isCallValid = (context->skipValidation() || ValidateDrawElementsInstancedBaseVertex(
+                                                             context, modePacked, count, typePacked,
+                                                             indices, instancecount, basevertex));
         if (isCallValid)
         {
-            context->drawElementsInstancedBaseVertex(mode, count, type, indices, instancecount,
-                                                     basevertex);
+            context->drawElementsInstancedBaseVertex(modePacked, count, typePacked, indices,
+                                                     instancecount, basevertex);
         }
-        ANGLE_CAPTURE(DrawElementsInstancedBaseVertex, isCallValid, context, mode, count, type,
-                      indices, instancecount, basevertex);
+        ANGLE_CAPTURE(DrawElementsInstancedBaseVertex, isCallValid, context, modePacked, count,
+                      typePacked, indices, instancecount, basevertex);
     }
 }
 
@@ -368,17 +372,19 @@ void GL_APIENTRY DrawRangeElementsBaseVertex(GLenum mode,
 
     if (context)
     {
+        PrimitiveMode modePacked                      = FromGL<PrimitiveMode>(mode);
+        DrawElementsType typePacked                   = FromGL<DrawElementsType>(type);
         std::unique_lock<std::mutex> shareContextLock = GetShareGroupLock(context);
-        bool isCallValid                              = (context->skipValidation() ||
-                            ValidateDrawRangeElementsBaseVertex(context, mode, start, end, count,
-                                                                type, indices, basevertex));
+        bool isCallValid = (context->skipValidation() || ValidateDrawRangeElementsBaseVertex(
+                                                             context, modePacked, start, end, count,
+                                                             typePacked, indices, basevertex));
         if (isCallValid)
         {
-            context->drawRangeElementsBaseVertex(mode, start, end, count, type, indices,
+            context->drawRangeElementsBaseVertex(modePacked, start, end, count, typePacked, indices,
                                                  basevertex);
         }
-        ANGLE_CAPTURE(DrawRangeElementsBaseVertex, isCallValid, context, mode, start, end, count,
-                      type, indices, basevertex);
+        ANGLE_CAPTURE(DrawRangeElementsBaseVertex, isCallValid, context, modePacked, start, end,
+                      count, typePacked, indices, basevertex);
     }
 }
 
diff --git a/src/libGLESv2/entry_points_gles_ext_autogen.cpp b/src/libGLESv2/entry_points_gles_ext_autogen.cpp
index 7e022dd44..0f5b705f1 100644
--- a/src/libGLESv2/entry_points_gles_ext_autogen.cpp
+++ b/src/libGLESv2/entry_points_gles_ext_autogen.cpp
@@ -4149,6 +4149,134 @@ void GL_APIENTRY DrawBuffersEXT(GLsizei n, const GLenum *bufs)
     }
 }
 
+// GL_EXT_draw_elements_base_vertex
+void GL_APIENTRY DrawElementsBaseVertexEXT(GLenum mode,
+                                           GLsizei count,
+                                           GLenum type,
+                                           const void *indices,
+                                           GLint basevertex)
+{
+    Context *context = GetValidGlobalContext();
+    EVENT("glDrawElementsBaseVertexEXT",
+          "context = %d, GLenum mode = %s, GLsizei count = %d, GLenum type = %s, const void "
+          "*indices = 0x%016" PRIxPTR ", GLint basevertex = %d",
+          CID(context), GLenumToString(GLenumGroup::PrimitiveType, mode), count,
+          GLenumToString(GLenumGroup::DrawElementsType, type), (uintptr_t)indices, basevertex);
+
+    if (context)
+    {
+        PrimitiveMode modePacked                      = FromGL<PrimitiveMode>(mode);
+        DrawElementsType typePacked                   = FromGL<DrawElementsType>(type);
+        std::unique_lock<std::mutex> shareContextLock = GetShareGroupLock(context);
+        bool isCallValid                              = (context->skipValidation() ||
+                            ValidateDrawElementsBaseVertexEXT(context, modePacked, count,
+                                                              typePacked, indices, basevertex));
+        if (isCallValid)
+        {
+            context->drawElementsBaseVertex(modePacked, count, typePacked, indices, basevertex);
+        }
+        ANGLE_CAPTURE(DrawElementsBaseVertexEXT, isCallValid, context, modePacked, count,
+                      typePacked, indices, basevertex);
+    }
+}
+
+void GL_APIENTRY DrawElementsInstancedBaseVertexEXT(GLenum mode,
+                                                    GLsizei count,
+                                                    GLenum type,
+                                                    const void *indices,
+                                                    GLsizei instancecount,
+                                                    GLint basevertex)
+{
+    Context *context = GetValidGlobalContext();
+    EVENT("glDrawElementsInstancedBaseVertexEXT",
+          "context = %d, GLenum mode = %s, GLsizei count = %d, GLenum type = %s, const void "
+          "*indices = 0x%016" PRIxPTR ", GLsizei instancecount = %d, GLint basevertex = %d",
+          CID(context), GLenumToString(GLenumGroup::PrimitiveType, mode), count,
+          GLenumToString(GLenumGroup::DrawElementsType, type), (uintptr_t)indices, instancecount,
+          basevertex);
+
+    if (context)
+    {
+        PrimitiveMode modePacked                      = FromGL<PrimitiveMode>(mode);
+        DrawElementsType typePacked                   = FromGL<DrawElementsType>(type);
+        std::unique_lock<std::mutex> shareContextLock = GetShareGroupLock(context);
+        bool isCallValid = (context->skipValidation() || ValidateDrawElementsInstancedBaseVertexEXT(
+                                                             context, modePacked, count, typePacked,
+                                                             indices, instancecount, basevertex));
+        if (isCallValid)
+        {
+            context->drawElementsInstancedBaseVertex(modePacked, count, typePacked, indices,
+                                                     instancecount, basevertex);
+        }
+        ANGLE_CAPTURE(DrawElementsInstancedBaseVertexEXT, isCallValid, context, modePacked, count,
+                      typePacked, indices, instancecount, basevertex);
+    }
+}
+
+void GL_APIENTRY DrawRangeElementsBaseVertexEXT(GLenum mode,
+                                                GLuint start,
+                                                GLuint end,
+                                                GLsizei count,
+                                                GLenum type,
+                                                const void *indices,
+                                                GLint basevertex)
+{
+    Context *context = GetValidGlobalContext();
+    EVENT("glDrawRangeElementsBaseVertexEXT",
+          "context = %d, GLenum mode = %s, GLuint start = %u, GLuint end = %u, GLsizei count = %d, "
+          "GLenum type = %s, const void *indices = 0x%016" PRIxPTR ", GLint basevertex = %d",
+          CID(context), GLenumToString(GLenumGroup::PrimitiveType, mode), start, end, count,
+          GLenumToString(GLenumGroup::DrawElementsType, type), (uintptr_t)indices, basevertex);
+
+    if (context)
+    {
+        PrimitiveMode modePacked                      = FromGL<PrimitiveMode>(mode);
+        DrawElementsType typePacked                   = FromGL<DrawElementsType>(type);
+        std::unique_lock<std::mutex> shareContextLock = GetShareGroupLock(context);
+        bool isCallValid = (context->skipValidation() || ValidateDrawRangeElementsBaseVertexEXT(
+                                                             context, modePacked, start, end, count,
+                                                             typePacked, indices, basevertex));
+        if (isCallValid)
+        {
+            context->drawRangeElementsBaseVertex(modePacked, start, end, count, typePacked, indices,
+                                                 basevertex);
+        }
+        ANGLE_CAPTURE(DrawRangeElementsBaseVertexEXT, isCallValid, context, modePacked, start, end,
+                      count, typePacked, indices, basevertex);
+    }
+}
+
+void GL_APIENTRY MultiDrawElementsBaseVertexEXT(GLenum mode,
+                                                const GLsizei *count,
+                                                GLenum type,
+                                                const void *const *indices,
+                                                GLsizei primcount,
+                                                const GLint *basevertex)
+{
+    Context *context = GetValidGlobalContext();
+    EVENT("glMultiDrawElementsBaseVertexEXT",
+          "context = %d, GLenum mode = %s, const GLsizei *count = 0x%016" PRIxPTR
+          ", GLenum type = %s, const void *const*indices = 0x%016" PRIxPTR
+          ", GLsizei primcount = %d, const GLint *basevertex = 0x%016" PRIxPTR "",
+          CID(context), GLenumToString(GLenumGroup::PrimitiveType, mode), (uintptr_t)count,
+          GLenumToString(GLenumGroup::DrawElementsType, type), (uintptr_t)indices, primcount,
+          (uintptr_t)basevertex);
+
+    if (context)
+    {
+        std::unique_lock<std::mutex> shareContextLock = GetShareGroupLock(context);
+        bool isCallValid                              = (context->skipValidation() ||
+                            ValidateMultiDrawElementsBaseVertexEXT(context, mode, count, type,
+                                                                   indices, primcount, basevertex));
+        if (isCallValid)
+        {
+            context->multiDrawElementsBaseVertex(mode, count, type, indices, primcount, basevertex);
+        }
+        ANGLE_CAPTURE(MultiDrawElementsBaseVertexEXT, isCallValid, context, mode, count, type,
+                      indices, primcount, basevertex);
+    }
+}
+
 // GL_EXT_geometry_shader
 void GL_APIENTRY FramebufferTextureEXT(GLenum target,
                                        GLenum attachment,
@@ -5672,6 +5800,105 @@ void GL_APIENTRY EGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image)
     }
 }
 
+// GL_OES_draw_elements_base_vertex
+void GL_APIENTRY DrawElementsBaseVertexOES(GLenum mode,
+                                           GLsizei count,
+                                           GLenum type,
+                                           const void *indices,
+                                           GLint basevertex)
+{
+    Context *context = GetValidGlobalContext();
+    EVENT("glDrawElementsBaseVertexOES",
+          "context = %d, GLenum mode = %s, GLsizei count = %d, GLenum type = %s, const void "
+          "*indices = 0x%016" PRIxPTR ", GLint basevertex = %d",
+          CID(context), GLenumToString(GLenumGroup::PrimitiveType, mode), count,
+          GLenumToString(GLenumGroup::DrawElementsType, type), (uintptr_t)indices, basevertex);
+
+    if (context)
+    {
+        PrimitiveMode modePacked                      = FromGL<PrimitiveMode>(mode);
+        DrawElementsType typePacked                   = FromGL<DrawElementsType>(type);
+        std::unique_lock<std::mutex> shareContextLock = GetShareGroupLock(context);
+        bool isCallValid                              = (context->skipValidation() ||
+                            ValidateDrawElementsBaseVertexOES(context, modePacked, count,
+                                                              typePacked, indices, basevertex));
+        if (isCallValid)
+        {
+            context->drawElementsBaseVertex(modePacked, count, typePacked, indices, basevertex);
+        }
+        ANGLE_CAPTURE(DrawElementsBaseVertexOES, isCallValid, context, modePacked, count,
+                      typePacked, indices, basevertex);
+    }
+}
+
+void GL_APIENTRY DrawElementsInstancedBaseVertexOES(GLenum mode,
+                                                    GLsizei count,
+                                                    GLenum type,
+                                                    const void *indices,
+                                                    GLsizei instancecount,
+                                                    GLint basevertex)
+{
+    Context *context = GetValidGlobalContext();
+    EVENT("glDrawElementsInstancedBaseVertexOES",
+          "context = %d, GLenum mode = %s, GLsizei count = %d, GLenum type = %s, const void "
+          "*indices = 0x%016" PRIxPTR ", GLsizei instancecount = %d, GLint basevertex = %d",
+          CID(context), GLenumToString(GLenumGroup::PrimitiveType, mode), count,
+          GLenumToString(GLenumGroup::DrawElementsType, type), (uintptr_t)indices, instancecount,
+          basevertex);
+
+    if (context)
+    {
+        PrimitiveMode modePacked                      = FromGL<PrimitiveMode>(mode);
+        DrawElementsType typePacked                   = FromGL<DrawElementsType>(type);
+        std::unique_lock<std::mutex> shareContextLock = GetShareGroupLock(context);
+        bool isCallValid = (context->skipValidation() || ValidateDrawElementsInstancedBaseVertexOES(
+                                                             context, modePacked, count, typePacked,
+                                                             indices, instancecount, basevertex));
+        if (isCallValid)
+        {
+            context->drawElementsInstancedBaseVertex(modePacked, count, typePacked, indices,
+                                                     instancecount, basevertex);
+        }
+        ANGLE_CAPTURE(DrawElementsInstancedBaseVertexOES, isCallValid, context, modePacked, count,
+                      typePacked, indices, instancecount, basevertex);
+    }
+}
+
+void GL_APIENTRY DrawRangeElementsBaseVertexOES(GLenum mode,
+                                                GLuint start,
+                                                GLuint end,
+                                                GLsizei count,
+                                                GLenum type,
+                                                const void *indices,
+                                                GLint basevertex)
+{
+    Context *context = GetValidGlobalContext();
+    EVENT("glDrawRangeElementsBaseVertexOES",
+          "context = %d, GLenum mode = %s, GLuint start = %u, GLuint end = %u, GLsizei count = %d, "
+          "GLenum type = %s, const void *indices = 0x%016" PRIxPTR ", GLint basevertex = %d",
+          CID(context), GLenumToString(GLenumGroup::PrimitiveType, mode), start, end, count,
+          GLenumToString(GLenumGroup::DrawElementsType, type), (uintptr_t)indices, basevertex);
+
+    if (context)
+    {
+        PrimitiveMode modePacked                      = FromGL<PrimitiveMode>(mode);
+        DrawElementsType typePacked                   = FromGL<DrawElementsType>(type);
+        std::unique_lock<std::mutex> shareContextLock = GetShareGroupLock(context);
+        bool isCallValid = (context->skipValidation() || ValidateDrawRangeElementsBaseVertexOES(
+                                                             context, modePacked, start, end, count,
+                                                             typePacked, indices, basevertex));
+        if (isCallValid)
+        {
+            context->drawRangeElementsBaseVertex(modePacked, start, end, count, typePacked, indices,
+                                                 basevertex);
+        }
+        ANGLE_CAPTURE(DrawRangeElementsBaseVertexOES, isCallValid, context, modePacked, start, end,
+                      count, typePacked, indices, basevertex);
+    }
+}
+
+// MultiDrawElementsBaseVertexEXT is already defined.
+
 // GL_OES_draw_texture
 void GL_APIENTRY DrawTexfOES(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height)
 {
@@ -10501,16 +10728,82 @@ void GL_APIENTRY DrawElementsBaseVertexContextANGLE(GLeglContext ctx,
     if (context)
     {
         ASSERT(context == GetValidGlobalContext());
+        PrimitiveMode modePacked                      = FromGL<PrimitiveMode>(mode);
+        DrawElementsType typePacked                   = FromGL<DrawElementsType>(type);
         std::unique_lock<std::mutex> shareContextLock = GetShareGroupLock(context);
-        bool isCallValid =
-            (context->skipValidation() ||
-             ValidateDrawElementsBaseVertex(context, mode, count, type, indices, basevertex));
+        bool isCallValid                              = (context->skipValidation() ||
+                            ValidateDrawElementsBaseVertex(context, modePacked, count, typePacked,
+                                                           indices, basevertex));
         if (isCallValid)
         {
-            context->drawElementsBaseVertex(mode, count, type, indices, basevertex);
+            context->drawElementsBaseVertex(modePacked, count, typePacked, indices, basevertex);
         }
-        ANGLE_CAPTURE(DrawElementsBaseVertex, isCallValid, context, mode, count, type, indices,
-                      basevertex);
+        ANGLE_CAPTURE(DrawElementsBaseVertex, isCallValid, context, modePacked, count, typePacked,
+                      indices, basevertex);
+    }
+}
+
+void GL_APIENTRY DrawElementsBaseVertexEXTContextANGLE(GLeglContext ctx,
+                                                       GLenum mode,
+                                                       GLsizei count,
+                                                       GLenum type,
+                                                       const void *indices,
+                                                       GLint basevertex)
+{
+    Context *context = static_cast<gl::Context *>(ctx);
+    EVENT("glDrawElementsBaseVertexEXT",
+          "context = %d, GLenum mode = %s, GLsizei count = %d, GLenum type = %s, const void "
+          "*indices = 0x%016" PRIxPTR ", GLint basevertex = %d",
+          CID(context), GLenumToString(GLenumGroup::PrimitiveType, mode), count,
+          GLenumToString(GLenumGroup::DrawElementsType, type), (uintptr_t)indices, basevertex);
+
+    if (context)
+    {
+        ASSERT(context == GetValidGlobalContext());
+        PrimitiveMode modePacked                      = FromGL<PrimitiveMode>(mode);
+        DrawElementsType typePacked                   = FromGL<DrawElementsType>(type);
+        std::unique_lock<std::mutex> shareContextLock = GetShareGroupLock(context);
+        bool isCallValid                              = (context->skipValidation() ||
+                            ValidateDrawElementsBaseVertexEXT(context, modePacked, count,
+                                                              typePacked, indices, basevertex));
+        if (isCallValid)
+        {
+            context->drawElementsBaseVertex(modePacked, count, typePacked, indices, basevertex);
+        }
+        ANGLE_CAPTURE(DrawElementsBaseVertexEXT, isCallValid, context, modePacked, count,
+                      typePacked, indices, basevertex);
+    }
+}
+
+void GL_APIENTRY DrawElementsBaseVertexOESContextANGLE(GLeglContext ctx,
+                                                       GLenum mode,
+                                                       GLsizei count,
+                                                       GLenum type,
+                                                       const void *indices,
+                                                       GLint basevertex)
+{
+    Context *context = static_cast<gl::Context *>(ctx);
+    EVENT("glDrawElementsBaseVertexOES",
+          "context = %d, GLenum mode = %s, GLsizei count = %d, GLenum type = %s, const void "
+          "*indices = 0x%016" PRIxPTR ", GLint basevertex = %d",
+          CID(context), GLenumToString(GLenumGroup::PrimitiveType, mode), count,
+          GLenumToString(GLenumGroup::DrawElementsType, type), (uintptr_t)indices, basevertex);
+
+    if (context)
+    {
+        ASSERT(context == GetValidGlobalContext());
+        PrimitiveMode modePacked                      = FromGL<PrimitiveMode>(mode);
+        DrawElementsType typePacked                   = FromGL<DrawElementsType>(type);
+        std::unique_lock<std::mutex> shareContextLock = GetShareGroupLock(context);
+        bool isCallValid                              = (context->skipValidation() ||
+                            ValidateDrawElementsBaseVertexOES(context, modePacked, count,
+                                                              typePacked, indices, basevertex));
+        if (isCallValid)
+        {
+            context->drawElementsBaseVertex(modePacked, count, typePacked, indices, basevertex);
+        }
+        ANGLE_CAPTURE(DrawElementsBaseVertexOES, isCallValid, context, modePacked, count,
+                      typePacked, indices, basevertex);
     }
 }
 
@@ -10626,17 +10919,89 @@ void GL_APIENTRY DrawElementsInstancedBaseVertexContextANGLE(GLeglContext ctx,
     if (context)
     {
         ASSERT(context == GetValidGlobalContext());
+        PrimitiveMode modePacked                      = FromGL<PrimitiveMode>(mode);
+        DrawElementsType typePacked                   = FromGL<DrawElementsType>(type);
         std::unique_lock<std::mutex> shareContextLock = GetShareGroupLock(context);
-        bool isCallValid                              = (context->skipValidation() ||
-                            ValidateDrawElementsInstancedBaseVertex(
-                                context, mode, count, type, indices, instancecount, basevertex));
+        bool isCallValid = (context->skipValidation() || ValidateDrawElementsInstancedBaseVertex(
+                                                             context, modePacked, count, typePacked,
+                                                             indices, instancecount, basevertex));
+        if (isCallValid)
+        {
+            context->drawElementsInstancedBaseVertex(modePacked, count, typePacked, indices,
+                                                     instancecount, basevertex);
+        }
+        ANGLE_CAPTURE(DrawElementsInstancedBaseVertex, isCallValid, context, modePacked, count,
+                      typePacked, indices, instancecount, basevertex);
+    }
+}
+
+void GL_APIENTRY DrawElementsInstancedBaseVertexEXTContextANGLE(GLeglContext ctx,
+                                                                GLenum mode,
+                                                                GLsizei count,
+                                                                GLenum type,
+                                                                const void *indices,
+                                                                GLsizei instancecount,
+                                                                GLint basevertex)
+{
+    Context *context = static_cast<gl::Context *>(ctx);
+    EVENT("glDrawElementsInstancedBaseVertexEXT",
+          "context = %d, GLenum mode = %s, GLsizei count = %d, GLenum type = %s, const void "
+          "*indices = 0x%016" PRIxPTR ", GLsizei instancecount = %d, GLint basevertex = %d",
+          CID(context), GLenumToString(GLenumGroup::PrimitiveType, mode), count,
+          GLenumToString(GLenumGroup::DrawElementsType, type), (uintptr_t)indices, instancecount,
+          basevertex);
+
+    if (context)
+    {
+        ASSERT(context == GetValidGlobalContext());
+        PrimitiveMode modePacked                      = FromGL<PrimitiveMode>(mode);
+        DrawElementsType typePacked                   = FromGL<DrawElementsType>(type);
+        std::unique_lock<std::mutex> shareContextLock = GetShareGroupLock(context);
+        bool isCallValid = (context->skipValidation() || ValidateDrawElementsInstancedBaseVertexEXT(
+                                                             context, modePacked, count, typePacked,
+                                                             indices, instancecount, basevertex));
+        if (isCallValid)
+        {
+            context->drawElementsInstancedBaseVertex(modePacked, count, typePacked, indices,
+                                                     instancecount, basevertex);
+        }
+        ANGLE_CAPTURE(DrawElementsInstancedBaseVertexEXT, isCallValid, context, modePacked, count,
+                      typePacked, indices, instancecount, basevertex);
+    }
+}
+
+void GL_APIENTRY DrawElementsInstancedBaseVertexOESContextANGLE(GLeglContext ctx,
+                                                                GLenum mode,
+                                                                GLsizei count,
+                                                                GLenum type,
+                                                                const void *indices,
+                                                                GLsizei instancecount,
+                                                                GLint basevertex)
+{
+    Context *context = static_cast<gl::Context *>(ctx);
+    EVENT("glDrawElementsInstancedBaseVertexOES",
+          "context = %d, GLenum mode = %s, GLsizei count = %d, GLenum type = %s, const void "
+          "*indices = 0x%016" PRIxPTR ", GLsizei instancecount = %d, GLint basevertex = %d",
+          CID(context), GLenumToString(GLenumGroup::PrimitiveType, mode), count,
+          GLenumToString(GLenumGroup::DrawElementsType, type), (uintptr_t)indices, instancecount,
+          basevertex);
+
+    if (context)
+    {
+        ASSERT(context == GetValidGlobalContext());
+        PrimitiveMode modePacked                      = FromGL<PrimitiveMode>(mode);
+        DrawElementsType typePacked                   = FromGL<DrawElementsType>(type);
+        std::unique_lock<std::mutex> shareContextLock = GetShareGroupLock(context);
+        bool isCallValid = (context->skipValidation() || ValidateDrawElementsInstancedBaseVertexOES(
+                                                             context, modePacked, count, typePacked,
+                                                             indices, instancecount, basevertex));
         if (isCallValid)
         {
-            context->drawElementsInstancedBaseVertex(mode, count, type, indices, instancecount,
-                                                     basevertex);
+            context->drawElementsInstancedBaseVertex(modePacked, count, typePacked, indices,
+                                                     instancecount, basevertex);
         }
-        ANGLE_CAPTURE(DrawElementsInstancedBaseVertex, isCallValid, context, mode, count, type,
-                      indices, instancecount, basevertex);
+        ANGLE_CAPTURE(DrawElementsInstancedBaseVertexOES, isCallValid, context, modePacked, count,
+                      typePacked, indices, instancecount, basevertex);
     }
 }
 
@@ -10724,17 +11089,89 @@ void GL_APIENTRY DrawRangeElementsBaseVertexContextANGLE(GLeglContext ctx,
     if (context)
     {
         ASSERT(context == GetValidGlobalContext());
+        PrimitiveMode modePacked                      = FromGL<PrimitiveMode>(mode);
+        DrawElementsType typePacked                   = FromGL<DrawElementsType>(type);
         std::unique_lock<std::mutex> shareContextLock = GetShareGroupLock(context);
-        bool isCallValid                              = (context->skipValidation() ||
-                            ValidateDrawRangeElementsBaseVertex(context, mode, start, end, count,
-                                                                type, indices, basevertex));
+        bool isCallValid = (context->skipValidation() || ValidateDrawRangeElementsBaseVertex(
+                                                             context, modePacked, start, end, count,
+                                                             typePacked, indices, basevertex));
         if (isCallValid)
         {
-            context->drawRangeElementsBaseVertex(mode, start, end, count, type, indices,
+            context->drawRangeElementsBaseVertex(modePacked, start, end, count, typePacked, indices,
                                                  basevertex);
         }
-        ANGLE_CAPTURE(DrawRangeElementsBaseVertex, isCallValid, context, mode, start, end, count,
-                      type, indices, basevertex);
+        ANGLE_CAPTURE(DrawRangeElementsBaseVertex, isCallValid, context, modePacked, start, end,
+                      count, typePacked, indices, basevertex);
+    }
+}
+
+void GL_APIENTRY DrawRangeElementsBaseVertexEXTContextANGLE(GLeglContext ctx,
+                                                            GLenum mode,
+                                                            GLuint start,
+                                                            GLuint end,
+                                                            GLsizei count,
+                                                            GLenum type,
+                                                            const void *indices,
+                                                            GLint basevertex)
+{
+    Context *context = static_cast<gl::Context *>(ctx);
+    EVENT("glDrawRangeElementsBaseVertexEXT",
+          "context = %d, GLenum mode = %s, GLuint start = %u, GLuint end = %u, GLsizei count = %d, "
+          "GLenum type = %s, const void *indices = 0x%016" PRIxPTR ", GLint basevertex = %d",
+          CID(context), GLenumToString(GLenumGroup::PrimitiveType, mode), start, end, count,
+          GLenumToString(GLenumGroup::DrawElementsType, type), (uintptr_t)indices, basevertex);
+
+    if (context)
+    {
+        ASSERT(context == GetValidGlobalContext());
+        PrimitiveMode modePacked                      = FromGL<PrimitiveMode>(mode);
+        DrawElementsType typePacked                   = FromGL<DrawElementsType>(type);
+        std::unique_lock<std::mutex> shareContextLock = GetShareGroupLock(context);
+        bool isCallValid = (context->skipValidation() || ValidateDrawRangeElementsBaseVertexEXT(
+                                                             context, modePacked, start, end, count,
+                                                             typePacked, indices, basevertex));
+        if (isCallValid)
+        {
+            context->drawRangeElementsBaseVertex(modePacked, start, end, count, typePacked, indices,
+                                                 basevertex);
+        }
+        ANGLE_CAPTURE(DrawRangeElementsBaseVertexEXT, isCallValid, context, modePacked, start, end,
+                      count, typePacked, indices, basevertex);
+    }
+}
+
+void GL_APIENTRY DrawRangeElementsBaseVertexOESContextANGLE(GLeglContext ctx,
+                                                            GLenum mode,
+                                                            GLuint start,
+                                                            GLuint end,
+                                                            GLsizei count,
+                                                            GLenum type,
+                                                            const void *indices,
+                                                            GLint basevertex)
+{
+    Context *context = static_cast<gl::Context *>(ctx);
+    EVENT("glDrawRangeElementsBaseVertexOES",
+          "context = %d, GLenum mode = %s, GLuint start = %u, GLuint end = %u, GLsizei count = %d, "
+          "GLenum type = %s, const void *indices = 0x%016" PRIxPTR ", GLint basevertex = %d",
+          CID(context), GLenumToString(GLenumGroup::PrimitiveType, mode), start, end, count,
+          GLenumToString(GLenumGroup::DrawElementsType, type), (uintptr_t)indices, basevertex);
+
+    if (context)
+    {
+        ASSERT(context == GetValidGlobalContext());
+        PrimitiveMode modePacked                      = FromGL<PrimitiveMode>(mode);
+        DrawElementsType typePacked                   = FromGL<DrawElementsType>(type);
+        std::unique_lock<std::mutex> shareContextLock = GetShareGroupLock(context);
+        bool isCallValid = (context->skipValidation() || ValidateDrawRangeElementsBaseVertexOES(
+                                                             context, modePacked, start, end, count,
+                                                             typePacked, indices, basevertex));
+        if (isCallValid)
+        {
+            context->drawRangeElementsBaseVertex(modePacked, start, end, count, typePacked, indices,
+                                                 basevertex);
+        }
+        ANGLE_CAPTURE(DrawRangeElementsBaseVertexOES, isCallValid, context, modePacked, start, end,
+                      count, typePacked, indices, basevertex);
     }
 }
 
@@ -16860,6 +17297,39 @@ void GL_APIENTRY MultMatrixxContextANGLE(GLeglContext ctx, const GLfixed *m)
     }
 }
 
+void GL_APIENTRY MultiDrawElementsBaseVertexEXTContextANGLE(GLeglContext ctx,
+                                                            GLenum mode,
+                                                            const GLsizei *count,
+                                                            GLenum type,
+                                                            const void *const *indices,
+                                                            GLsizei primcount,
+                                                            const GLint *basevertex)
+{
+    Context *context = static_cast<gl::Context *>(ctx);
+    EVENT("glMultiDrawElementsBaseVertexEXT",
+          "context = %d, GLenum mode = %s, const GLsizei *count = 0x%016" PRIxPTR
+          ", GLenum type = %s, const void *const*indices = 0x%016" PRIxPTR
+          ", GLsizei primcount = %d, const GLint *basevertex = 0x%016" PRIxPTR "",
+          CID(context), GLenumToString(GLenumGroup::PrimitiveType, mode), (uintptr_t)count,
+          GLenumToString(GLenumGroup::DrawElementsType, type), (uintptr_t)indices, primcount,
+          (uintptr_t)basevertex);
+
+    if (context)
+    {
+        ASSERT(context == GetValidGlobalContext());
+        std::unique_lock<std::mutex> shareContextLock = GetShareGroupLock(context);
+        bool isCallValid                              = (context->skipValidation() ||
+                            ValidateMultiDrawElementsBaseVertexEXT(context, mode, count, type,
+                                                                   indices, primcount, basevertex));
+        if (isCallValid)
+        {
+            context->multiDrawElementsBaseVertex(mode, count, type, indices, primcount, basevertex);
+        }
+        ANGLE_CAPTURE(MultiDrawElementsBaseVertexEXT, isCallValid, context, mode, count, type,
+                      indices, primcount, basevertex);
+    }
+}
+
 void GL_APIENTRY MultiTexCoord4fContextANGLE(GLeglContext ctx,
                                              GLenum target,
                                              GLfloat s,
diff --git a/src/libGLESv2/entry_points_gles_ext_autogen.h b/src/libGLESv2/entry_points_gles_ext_autogen.h
index d7f6dba10..0b3775b31 100644
--- a/src/libGLESv2/entry_points_gles_ext_autogen.h
+++ b/src/libGLESv2/entry_points_gles_ext_autogen.h
@@ -721,6 +721,32 @@ ANGLE_EXPORT void GL_APIENTRY QueryCounterEXT(GLuint id, GLenum target);
 // GL_EXT_draw_buffers
 ANGLE_EXPORT void GL_APIENTRY DrawBuffersEXT(GLsizei n, const GLenum *bufs);
 
+// GL_EXT_draw_elements_base_vertex
+ANGLE_EXPORT void GL_APIENTRY DrawElementsBaseVertexEXT(GLenum mode,
+                                                        GLsizei count,
+                                                        GLenum type,
+                                                        const void *indices,
+                                                        GLint basevertex);
+ANGLE_EXPORT void GL_APIENTRY DrawElementsInstancedBaseVertexEXT(GLenum mode,
+                                                                 GLsizei count,
+                                                                 GLenum type,
+                                                                 const void *indices,
+                                                                 GLsizei instancecount,
+                                                                 GLint basevertex);
+ANGLE_EXPORT void GL_APIENTRY DrawRangeElementsBaseVertexEXT(GLenum mode,
+                                                             GLuint start,
+                                                             GLuint end,
+                                                             GLsizei count,
+                                                             GLenum type,
+                                                             const void *indices,
+                                                             GLint basevertex);
+ANGLE_EXPORT void GL_APIENTRY MultiDrawElementsBaseVertexEXT(GLenum mode,
+                                                             const GLsizei *count,
+                                                             GLenum type,
+                                                             const void *const *indices,
+                                                             GLsizei primcount,
+                                                             const GLint *basevertex);
+
 // GL_EXT_geometry_shader
 ANGLE_EXPORT void GL_APIENTRY FramebufferTextureEXT(GLenum target,
                                                     GLenum attachment,
@@ -942,6 +968,26 @@ ANGLE_EXPORT void GL_APIENTRY EGLImageTargetRenderbufferStorageOES(GLenum target
                                                                    GLeglImageOES image);
 ANGLE_EXPORT void GL_APIENTRY EGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image);
 
+// GL_OES_draw_elements_base_vertex
+ANGLE_EXPORT void GL_APIENTRY DrawElementsBaseVertexOES(GLenum mode,
+                                                        GLsizei count,
+                                                        GLenum type,
+                                                        const void *indices,
+                                                        GLint basevertex);
+ANGLE_EXPORT void GL_APIENTRY DrawElementsInstancedBaseVertexOES(GLenum mode,
+                                                                 GLsizei count,
+                                                                 GLenum type,
+                                                                 const void *indices,
+                                                                 GLsizei instancecount,
+                                                                 GLint basevertex);
+ANGLE_EXPORT void GL_APIENTRY DrawRangeElementsBaseVertexOES(GLenum mode,
+                                                             GLuint start,
+                                                             GLuint end,
+                                                             GLsizei count,
+                                                             GLenum type,
+                                                             const void *indices,
+                                                             GLint basevertex);
+
 // GL_OES_draw_texture
 ANGLE_EXPORT void GL_APIENTRY
 DrawTexfOES(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height);
@@ -1621,6 +1667,18 @@ ANGLE_EXPORT void GL_APIENTRY DrawElementsBaseVertexContextANGLE(GLeglContext ct
                                                                  GLenum type,
                                                                  const void *indices,
                                                                  GLint basevertex);
+ANGLE_EXPORT void GL_APIENTRY DrawElementsBaseVertexEXTContextANGLE(GLeglContext ctx,
+                                                                    GLenum mode,
+                                                                    GLsizei count,
+                                                                    GLenum type,
+                                                                    const void *indices,
+                                                                    GLint basevertex);
+ANGLE_EXPORT void GL_APIENTRY DrawElementsBaseVertexOESContextANGLE(GLeglContext ctx,
+                                                                    GLenum mode,
+                                                                    GLsizei count,
+                                                                    GLenum type,
+                                                                    const void *indices,
+                                                                    GLint basevertex);
 ANGLE_EXPORT void GL_APIENTRY DrawElementsIndirectContextANGLE(GLeglContext ctx,
                                                                GLenum mode,
                                                                GLenum type,
@@ -1644,6 +1702,20 @@ ANGLE_EXPORT void GL_APIENTRY DrawElementsInstancedBaseVertexContextANGLE(GLeglC
                                                                           const void *indices,
                                                                           GLsizei instancecount,
                                                                           GLint basevertex);
+ANGLE_EXPORT void GL_APIENTRY DrawElementsInstancedBaseVertexEXTContextANGLE(GLeglContext ctx,
+                                                                             GLenum mode,
+                                                                             GLsizei count,
+                                                                             GLenum type,
+                                                                             const void *indices,
+                                                                             GLsizei instancecount,
+                                                                             GLint basevertex);
+ANGLE_EXPORT void GL_APIENTRY DrawElementsInstancedBaseVertexOESContextANGLE(GLeglContext ctx,
+                                                                             GLenum mode,
+                                                                             GLsizei count,
+                                                                             GLenum type,
+                                                                             const void *indices,
+                                                                             GLsizei instancecount,
+                                                                             GLint basevertex);
 ANGLE_EXPORT void GL_APIENTRY DrawElementsInstancedEXTContextANGLE(GLeglContext ctx,
                                                                    GLenum mode,
                                                                    GLsizei count,
@@ -1665,6 +1737,22 @@ ANGLE_EXPORT void GL_APIENTRY DrawRangeElementsBaseVertexContextANGLE(GLeglConte
                                                                       GLenum type,
                                                                       const void *indices,
                                                                       GLint basevertex);
+ANGLE_EXPORT void GL_APIENTRY DrawRangeElementsBaseVertexEXTContextANGLE(GLeglContext ctx,
+                                                                         GLenum mode,
+                                                                         GLuint start,
+                                                                         GLuint end,
+                                                                         GLsizei count,
+                                                                         GLenum type,
+                                                                         const void *indices,
+                                                                         GLint basevertex);
+ANGLE_EXPORT void GL_APIENTRY DrawRangeElementsBaseVertexOESContextANGLE(GLeglContext ctx,
+                                                                         GLenum mode,
+                                                                         GLuint start,
+                                                                         GLuint end,
+                                                                         GLsizei count,
+                                                                         GLenum type,
+                                                                         const void *indices,
+                                                                         GLint basevertex);
 ANGLE_EXPORT void GL_APIENTRY DrawTexfOESContextANGLE(GLeglContext ctx,
                                                       GLfloat x,
                                                       GLfloat y,
@@ -2472,6 +2560,13 @@ ANGLE_EXPORT void GL_APIENTRY MemoryObjectParameterivEXTContextANGLE(GLeglContex
 ANGLE_EXPORT void GL_APIENTRY MinSampleShadingContextANGLE(GLeglContext ctx, GLfloat value);
 ANGLE_EXPORT void GL_APIENTRY MultMatrixfContextANGLE(GLeglContext ctx, const GLfloat *m);
 ANGLE_EXPORT void GL_APIENTRY MultMatrixxContextANGLE(GLeglContext ctx, const GLfixed *m);
+ANGLE_EXPORT void GL_APIENTRY MultiDrawElementsBaseVertexEXTContextANGLE(GLeglContext ctx,
+                                                                         GLenum mode,
+                                                                         const GLsizei *count,
+                                                                         GLenum type,
+                                                                         const void *const *indices,
+                                                                         GLsizei primcount,
+                                                                         const GLint *basevertex);
 ANGLE_EXPORT void GL_APIENTRY MultiTexCoord4fContextANGLE(GLeglContext ctx,
                                                           GLenum target,
                                                           GLfloat s,
diff --git a/src/libGLESv2/libGLESv2_autogen.cpp b/src/libGLESv2/libGLESv2_autogen.cpp
index 63b5a86c0..27273f190 100644
--- a/src/libGLESv2/libGLESv2_autogen.cpp
+++ b/src/libGLESv2/libGLESv2_autogen.cpp
@@ -3995,6 +3995,48 @@ void GL_APIENTRY glDrawBuffersEXT(GLsizei n, const GLenum *bufs)
     return gl::DrawBuffersEXT(n, bufs);
 }
 
+// GL_EXT_draw_elements_base_vertex
+void GL_APIENTRY glDrawElementsBaseVertexEXT(GLenum mode,
+                                             GLsizei count,
+                                             GLenum type,
+                                             const void *indices,
+                                             GLint basevertex)
+{
+    return gl::DrawElementsBaseVertexEXT(mode, count, type, indices, basevertex);
+}
+
+void GL_APIENTRY glDrawElementsInstancedBaseVertexEXT(GLenum mode,
+                                                      GLsizei count,
+                                                      GLenum type,
+                                                      const void *indices,
+                                                      GLsizei instancecount,
+                                                      GLint basevertex)
+{
+    return gl::DrawElementsInstancedBaseVertexEXT(mode, count, type, indices, instancecount,
+                                                  basevertex);
+}
+
+void GL_APIENTRY glDrawRangeElementsBaseVertexEXT(GLenum mode,
+                                                  GLuint start,
+                                                  GLuint end,
+                                                  GLsizei count,
+                                                  GLenum type,
+                                                  const void *indices,
+                                                  GLint basevertex)
+{
+    return gl::DrawRangeElementsBaseVertexEXT(mode, start, end, count, type, indices, basevertex);
+}
+
+void GL_APIENTRY glMultiDrawElementsBaseVertexEXT(GLenum mode,
+                                                  const GLsizei *count,
+                                                  GLenum type,
+                                                  const void *const *indices,
+                                                  GLsizei primcount,
+                                                  const GLint *basevertex)
+{
+    return gl::MultiDrawElementsBaseVertexEXT(mode, count, type, indices, primcount, basevertex);
+}
+
 // GL_EXT_geometry_shader
 void GL_APIENTRY glFramebufferTextureEXT(GLenum target,
                                          GLenum attachment,
@@ -4421,6 +4463,38 @@ void GL_APIENTRY glEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image
     return gl::EGLImageTargetTexture2DOES(target, image);
 }
 
+// GL_OES_draw_elements_base_vertex
+void GL_APIENTRY glDrawElementsBaseVertexOES(GLenum mode,
+                                             GLsizei count,
+                                             GLenum type,
+                                             const void *indices,
+                                             GLint basevertex)
+{
+    return gl::DrawElementsBaseVertexOES(mode, count, type, indices, basevertex);
+}
+
+void GL_APIENTRY glDrawElementsInstancedBaseVertexOES(GLenum mode,
+                                                      GLsizei count,
+                                                      GLenum type,
+                                                      const void *indices,
+                                                      GLsizei instancecount,
+                                                      GLint basevertex)
+{
+    return gl::DrawElementsInstancedBaseVertexOES(mode, count, type, indices, instancecount,
+                                                  basevertex);
+}
+
+void GL_APIENTRY glDrawRangeElementsBaseVertexOES(GLenum mode,
+                                                  GLuint start,
+                                                  GLuint end,
+                                                  GLsizei count,
+                                                  GLenum type,
+                                                  const void *indices,
+                                                  GLint basevertex)
+{
+    return gl::DrawRangeElementsBaseVertexOES(mode, start, end, count, type, indices, basevertex);
+}
+
 // GL_OES_draw_texture
 void GL_APIENTRY glDrawTexfOES(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height)
 {
@@ -5811,6 +5885,26 @@ void GL_APIENTRY glDrawElementsBaseVertexContextANGLE(GLeglContext ctx,
     return gl::DrawElementsBaseVertexContextANGLE(ctx, mode, count, type, indices, basevertex);
 }
 
+void GL_APIENTRY glDrawElementsBaseVertexEXTContextANGLE(GLeglContext ctx,
+                                                         GLenum mode,
+                                                         GLsizei count,
+                                                         GLenum type,
+                                                         const void *indices,
+                                                         GLint basevertex)
+{
+    return gl::DrawElementsBaseVertexEXTContextANGLE(ctx, mode, count, type, indices, basevertex);
+}
+
+void GL_APIENTRY glDrawElementsBaseVertexOESContextANGLE(GLeglContext ctx,
+                                                         GLenum mode,
+                                                         GLsizei count,
+                                                         GLenum type,
+                                                         const void *indices,
+                                                         GLint basevertex)
+{
+    return gl::DrawElementsBaseVertexOESContextANGLE(ctx, mode, count, type, indices, basevertex);
+}
+
 void GL_APIENTRY glDrawElementsIndirectContextANGLE(GLeglContext ctx,
                                                     GLenum mode,
                                                     GLenum type,
@@ -5851,6 +5945,30 @@ void GL_APIENTRY glDrawElementsInstancedBaseVertexContextANGLE(GLeglContext ctx,
                                                            instancecount, basevertex);
 }
 
+void GL_APIENTRY glDrawElementsInstancedBaseVertexEXTContextANGLE(GLeglContext ctx,
+                                                                  GLenum mode,
+                                                                  GLsizei count,
+                                                                  GLenum type,
+                                                                  const void *indices,
+                                                                  GLsizei instancecount,
+                                                                  GLint basevertex)
+{
+    return gl::DrawElementsInstancedBaseVertexEXTContextANGLE(ctx, mode, count, type, indices,
+                                                              instancecount, basevertex);
+}
+
+void GL_APIENTRY glDrawElementsInstancedBaseVertexOESContextANGLE(GLeglContext ctx,
+                                                                  GLenum mode,
+                                                                  GLsizei count,
+                                                                  GLenum type,
+                                                                  const void *indices,
+                                                                  GLsizei instancecount,
+                                                                  GLint basevertex)
+{
+    return gl::DrawElementsInstancedBaseVertexOESContextANGLE(ctx, mode, count, type, indices,
+                                                              instancecount, basevertex);
+}
+
 void GL_APIENTRY glDrawElementsInstancedEXTContextANGLE(GLeglContext ctx,
                                                         GLenum mode,
                                                         GLsizei count,
@@ -5885,6 +6003,32 @@ void GL_APIENTRY glDrawRangeElementsBaseVertexContextANGLE(GLeglContext ctx,
                                                        basevertex);
 }
 
+void GL_APIENTRY glDrawRangeElementsBaseVertexEXTContextANGLE(GLeglContext ctx,
+                                                              GLenum mode,
+                                                              GLuint start,
+                                                              GLuint end,
+                                                              GLsizei count,
+                                                              GLenum type,
+                                                              const void *indices,
+                                                              GLint basevertex)
+{
+    return gl::DrawRangeElementsBaseVertexEXTContextANGLE(ctx, mode, start, end, count, type,
+                                                          indices, basevertex);
+}
+
+void GL_APIENTRY glDrawRangeElementsBaseVertexOESContextANGLE(GLeglContext ctx,
+                                                              GLenum mode,
+                                                              GLuint start,
+                                                              GLuint end,
+                                                              GLsizei count,
+                                                              GLenum type,
+                                                              const void *indices,
+                                                              GLint basevertex)
+{
+    return gl::DrawRangeElementsBaseVertexOESContextANGLE(ctx, mode, start, end, count, type,
+                                                          indices, basevertex);
+}
+
 void GL_APIENTRY glDrawTexfOESContextANGLE(GLeglContext ctx,
                                            GLfloat x,
                                            GLfloat y,
@@ -7563,6 +7707,18 @@ void GL_APIENTRY glMultMatrixxContextANGLE(GLeglContext ctx, const GLfixed *m)
     return gl::MultMatrixxContextANGLE(ctx, m);
 }
 
+void GL_APIENTRY glMultiDrawElementsBaseVertexEXTContextANGLE(GLeglContext ctx,
+                                                              GLenum mode,
+                                                              const GLsizei *count,
+                                                              GLenum type,
+                                                              const void *const *indices,
+                                                              GLsizei primcount,
+                                                              const GLint *basevertex)
+{
+    return gl::MultiDrawElementsBaseVertexEXTContextANGLE(ctx, mode, count, type, indices,
+                                                          primcount, basevertex);
+}
+
 void GL_APIENTRY glMultiTexCoord4fContextANGLE(GLeglContext ctx,
                                                GLenum target,
                                                GLfloat s,
diff --git a/src/libGLESv2/libGLESv2_autogen.def b/src/libGLESv2/libGLESv2_autogen.def
index b8a2aa7a4..3d9bb3b37 100644
--- a/src/libGLESv2/libGLESv2_autogen.def
+++ b/src/libGLESv2/libGLESv2_autogen.def
@@ -653,6 +653,12 @@ EXPORTS
     ; GL_EXT_draw_buffers
     glDrawBuffersEXT
 
+    ; GL_EXT_draw_elements_base_vertex
+    glDrawElementsBaseVertexEXT
+    glDrawElementsInstancedBaseVertexEXT
+    glDrawRangeElementsBaseVertexEXT
+    glMultiDrawElementsBaseVertexEXT
+
     ; GL_EXT_geometry_shader
     glFramebufferTextureEXT
 
@@ -742,6 +748,11 @@ EXPORTS
     glEGLImageTargetRenderbufferStorageOES
     glEGLImageTargetTexture2DOES
 
+    ; GL_OES_draw_elements_base_vertex
+    glDrawElementsBaseVertexOES
+    glDrawElementsInstancedBaseVertexOES
+    glDrawRangeElementsBaseVertexOES
+
     ; GL_OES_draw_texture
     glDrawTexfOES
     glDrawTexfvOES
@@ -981,14 +992,20 @@ EXPORTS
     glDrawBuffersEXTContextANGLE
     glDrawElementsContextANGLE
     glDrawElementsBaseVertexContextANGLE
+    glDrawElementsBaseVertexEXTContextANGLE
+    glDrawElementsBaseVertexOESContextANGLE
     glDrawElementsIndirectContextANGLE
     glDrawElementsInstancedContextANGLE
     glDrawElementsInstancedANGLEContextANGLE
     glDrawElementsInstancedBaseVertexContextANGLE
     glDrawElementsInstancedBaseVertexBaseInstanceANGLEContextANGLE
+    glDrawElementsInstancedBaseVertexEXTContextANGLE
+    glDrawElementsInstancedBaseVertexOESContextANGLE
     glDrawElementsInstancedEXTContextANGLE
     glDrawRangeElementsContextANGLE
     glDrawRangeElementsBaseVertexContextANGLE
+    glDrawRangeElementsBaseVertexEXTContextANGLE
+    glDrawRangeElementsBaseVertexOESContextANGLE
     glDrawTexfOESContextANGLE
     glDrawTexfvOESContextANGLE
     glDrawTexiOESContextANGLE
@@ -1284,6 +1301,7 @@ EXPORTS
     glMultiDrawArraysInstancedANGLEContextANGLE
     glMultiDrawArraysInstancedBaseInstanceANGLEContextANGLE
     glMultiDrawElementsANGLEContextANGLE
+    glMultiDrawElementsBaseVertexEXTContextANGLE
     glMultiDrawElementsInstancedANGLEContextANGLE
     glMultiDrawElementsInstancedBaseVertexBaseInstanceANGLEContextANGLE
     glMultiTexCoord4fContextANGLE
diff --git a/src/libGLESv2/libGLESv2_no_capture_autogen.def b/src/libGLESv2/libGLESv2_no_capture_autogen.def
index 658b99ced..4e32a4537 100644
--- a/src/libGLESv2/libGLESv2_no_capture_autogen.def
+++ b/src/libGLESv2/libGLESv2_no_capture_autogen.def
@@ -653,6 +653,12 @@ EXPORTS
     ; GL_EXT_draw_buffers
     glDrawBuffersEXT
 
+    ; GL_EXT_draw_elements_base_vertex
+    glDrawElementsBaseVertexEXT
+    glDrawElementsInstancedBaseVertexEXT
+    glDrawRangeElementsBaseVertexEXT
+    glMultiDrawElementsBaseVertexEXT
+
     ; GL_EXT_geometry_shader
     glFramebufferTextureEXT
 
@@ -742,6 +748,11 @@ EXPORTS
     glEGLImageTargetRenderbufferStorageOES
     glEGLImageTargetTexture2DOES
 
+    ; GL_OES_draw_elements_base_vertex
+    glDrawElementsBaseVertexOES
+    glDrawElementsInstancedBaseVertexOES
+    glDrawRangeElementsBaseVertexOES
+
     ; GL_OES_draw_texture
     glDrawTexfOES
     glDrawTexfvOES
@@ -981,14 +992,20 @@ EXPORTS
     glDrawBuffersEXTContextANGLE
     glDrawElementsContextANGLE
     glDrawElementsBaseVertexContextANGLE
+    glDrawElementsBaseVertexEXTContextANGLE
+    glDrawElementsBaseVertexOESContextANGLE
     glDrawElementsIndirectContextANGLE
     glDrawElementsInstancedContextANGLE
     glDrawElementsInstancedANGLEContextANGLE
     glDrawElementsInstancedBaseVertexContextANGLE
     glDrawElementsInstancedBaseVertexBaseInstanceANGLEContextANGLE
+    glDrawElementsInstancedBaseVertexEXTContextANGLE
+    glDrawElementsInstancedBaseVertexOESContextANGLE
     glDrawElementsInstancedEXTContextANGLE
     glDrawRangeElementsContextANGLE
     glDrawRangeElementsBaseVertexContextANGLE
+    glDrawRangeElementsBaseVertexEXTContextANGLE
+    glDrawRangeElementsBaseVertexOESContextANGLE
     glDrawTexfOESContextANGLE
     glDrawTexfvOESContextANGLE
     glDrawTexiOESContextANGLE
@@ -1284,6 +1301,7 @@ EXPORTS
     glMultiDrawArraysInstancedANGLEContextANGLE
     glMultiDrawArraysInstancedBaseInstanceANGLEContextANGLE
     glMultiDrawElementsANGLEContextANGLE
+    glMultiDrawElementsBaseVertexEXTContextANGLE
     glMultiDrawElementsInstancedANGLEContextANGLE
     glMultiDrawElementsInstancedBaseVertexBaseInstanceANGLEContextANGLE
     glMultiTexCoord4fContextANGLE
diff --git a/src/libGLESv2/libGLESv2_with_capture_autogen.def b/src/libGLESv2/libGLESv2_with_capture_autogen.def
index 4694f2ebf..8ad024f1a 100644
--- a/src/libGLESv2/libGLESv2_with_capture_autogen.def
+++ b/src/libGLESv2/libGLESv2_with_capture_autogen.def
@@ -653,6 +653,12 @@ EXPORTS
     ; GL_EXT_draw_buffers
     glDrawBuffersEXT
 
+    ; GL_EXT_draw_elements_base_vertex
+    glDrawElementsBaseVertexEXT
+    glDrawElementsInstancedBaseVertexEXT
+    glDrawRangeElementsBaseVertexEXT
+    glMultiDrawElementsBaseVertexEXT
+
     ; GL_EXT_geometry_shader
     glFramebufferTextureEXT
 
@@ -742,6 +748,11 @@ EXPORTS
     glEGLImageTargetRenderbufferStorageOES
     glEGLImageTargetTexture2DOES
 
+    ; GL_OES_draw_elements_base_vertex
+    glDrawElementsBaseVertexOES
+    glDrawElementsInstancedBaseVertexOES
+    glDrawRangeElementsBaseVertexOES
+
     ; GL_OES_draw_texture
     glDrawTexfOES
     glDrawTexfvOES
@@ -981,14 +992,20 @@ EXPORTS
     glDrawBuffersEXTContextANGLE
     glDrawElementsContextANGLE
     glDrawElementsBaseVertexContextANGLE
+    glDrawElementsBaseVertexEXTContextANGLE
+    glDrawElementsBaseVertexOESContextANGLE
     glDrawElementsIndirectContextANGLE
     glDrawElementsInstancedContextANGLE
     glDrawElementsInstancedANGLEContextANGLE
     glDrawElementsInstancedBaseVertexContextANGLE
     glDrawElementsInstancedBaseVertexBaseInstanceANGLEContextANGLE
+    glDrawElementsInstancedBaseVertexEXTContextANGLE
+    glDrawElementsInstancedBaseVertexOESContextANGLE
     glDrawElementsInstancedEXTContextANGLE
     glDrawRangeElementsContextANGLE
     glDrawRangeElementsBaseVertexContextANGLE
+    glDrawRangeElementsBaseVertexEXTContextANGLE
+    glDrawRangeElementsBaseVertexOESContextANGLE
     glDrawTexfOESContextANGLE
     glDrawTexfvOESContextANGLE
     glDrawTexiOESContextANGLE
@@ -1284,6 +1301,7 @@ EXPORTS
     glMultiDrawArraysInstancedANGLEContextANGLE
     glMultiDrawArraysInstancedBaseInstanceANGLEContextANGLE
     glMultiDrawElementsANGLEContextANGLE
+    glMultiDrawElementsBaseVertexEXTContextANGLE
     glMultiDrawElementsInstancedANGLEContextANGLE
     glMultiDrawElementsInstancedBaseVertexBaseInstanceANGLEContextANGLE
     glMultiTexCoord4fContextANGLE
diff --git a/src/libGLESv2/proc_table_egl_autogen.cpp b/src/libGLESv2/proc_table_egl_autogen.cpp
index bee7b7610..c88ddc457 100644
--- a/src/libGLESv2/proc_table_egl_autogen.cpp
+++ b/src/libGLESv2/proc_table_egl_autogen.cpp
@@ -402,6 +402,10 @@ ProcEntry g_procTable[] = {
     {"glDrawBuffersEXT", P(gl::DrawBuffersEXT)},
     {"glDrawBuffersEXTContextANGLE", P(gl::DrawBuffersEXTContextANGLE)},
     {"glDrawElements", P(gl::DrawElements)},
+    {"glDrawElementsBaseVertexEXT", P(gl::DrawElementsBaseVertexEXT)},
+    {"glDrawElementsBaseVertexEXTContextANGLE", P(gl::DrawElementsBaseVertexEXTContextANGLE)},
+    {"glDrawElementsBaseVertexOES", P(gl::DrawElementsBaseVertexOES)},
+    {"glDrawElementsBaseVertexOESContextANGLE", P(gl::DrawElementsBaseVertexOESContextANGLE)},
     {"glDrawElementsContextANGLE", P(gl::DrawElementsContextANGLE)},
     {"glDrawElementsIndirect", P(gl::DrawElementsIndirect)},
     {"glDrawElementsIndirectContextANGLE", P(gl::DrawElementsIndirectContextANGLE)},
@@ -412,10 +416,22 @@ ProcEntry g_procTable[] = {
      P(gl::DrawElementsInstancedBaseVertexBaseInstanceANGLE)},
     {"glDrawElementsInstancedBaseVertexBaseInstanceANGLEContextANGLE",
      P(gl::DrawElementsInstancedBaseVertexBaseInstanceANGLEContextANGLE)},
+    {"glDrawElementsInstancedBaseVertexEXT", P(gl::DrawElementsInstancedBaseVertexEXT)},
+    {"glDrawElementsInstancedBaseVertexEXTContextANGLE",
+     P(gl::DrawElementsInstancedBaseVertexEXTContextANGLE)},
+    {"glDrawElementsInstancedBaseVertexOES", P(gl::DrawElementsInstancedBaseVertexOES)},
+    {"glDrawElementsInstancedBaseVertexOESContextANGLE",
+     P(gl::DrawElementsInstancedBaseVertexOESContextANGLE)},
     {"glDrawElementsInstancedContextANGLE", P(gl::DrawElementsInstancedContextANGLE)},
     {"glDrawElementsInstancedEXT", P(gl::DrawElementsInstancedEXT)},
     {"glDrawElementsInstancedEXTContextANGLE", P(gl::DrawElementsInstancedEXTContextANGLE)},
     {"glDrawRangeElements", P(gl::DrawRangeElements)},
+    {"glDrawRangeElementsBaseVertexEXT", P(gl::DrawRangeElementsBaseVertexEXT)},
+    {"glDrawRangeElementsBaseVertexEXTContextANGLE",
+     P(gl::DrawRangeElementsBaseVertexEXTContextANGLE)},
+    {"glDrawRangeElementsBaseVertexOES", P(gl::DrawRangeElementsBaseVertexOES)},
+    {"glDrawRangeElementsBaseVertexOESContextANGLE",
+     P(gl::DrawRangeElementsBaseVertexOESContextANGLE)},
     {"glDrawRangeElementsContextANGLE", P(gl::DrawRangeElementsContextANGLE)},
     {"glDrawTexfOES", P(gl::DrawTexfOES)},
     {"glDrawTexfOESContextANGLE", P(gl::DrawTexfOESContextANGLE)},
@@ -1014,6 +1030,9 @@ ProcEntry g_procTable[] = {
      P(gl::MultiDrawArraysInstancedBaseInstanceANGLEContextANGLE)},
     {"glMultiDrawElementsANGLE", P(gl::MultiDrawElementsANGLE)},
     {"glMultiDrawElementsANGLEContextANGLE", P(gl::MultiDrawElementsANGLEContextANGLE)},
+    {"glMultiDrawElementsBaseVertexEXT", P(gl::MultiDrawElementsBaseVertexEXT)},
+    {"glMultiDrawElementsBaseVertexEXTContextANGLE",
+     P(gl::MultiDrawElementsBaseVertexEXTContextANGLE)},
     {"glMultiDrawElementsInstancedANGLE", P(gl::MultiDrawElementsInstancedANGLE)},
     {"glMultiDrawElementsInstancedANGLEContextANGLE",
      P(gl::MultiDrawElementsInstancedANGLEContextANGLE)},
@@ -1520,5 +1539,5 @@ ProcEntry g_procTable[] = {
     {"glWeightPointerOES", P(gl::WeightPointerOES)},
     {"glWeightPointerOESContextANGLE", P(gl::WeightPointerOESContextANGLE)}};
 
-size_t g_numProcs = 1421;
+size_t g_numProcs = 1435;
 }  // namespace egl
diff --git a/util/gles_loader_autogen.cpp b/util/gles_loader_autogen.cpp
index fd8e37706..944109659 100644
--- a/util/gles_loader_autogen.cpp
+++ b/util/gles_loader_autogen.cpp
@@ -565,6 +565,10 @@ ANGLE_UTIL_EXPORT PFNGLGETQUERYIVEXTPROC glGetQueryivEXT;
 ANGLE_UTIL_EXPORT PFNGLISQUERYEXTPROC glIsQueryEXT;
 ANGLE_UTIL_EXPORT PFNGLQUERYCOUNTEREXTPROC glQueryCounterEXT;
 ANGLE_UTIL_EXPORT PFNGLDRAWBUFFERSEXTPROC glDrawBuffersEXT;
+ANGLE_UTIL_EXPORT PFNGLDRAWELEMENTSBASEVERTEXEXTPROC glDrawElementsBaseVertexEXT;
+ANGLE_UTIL_EXPORT PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC glDrawElementsInstancedBaseVertexEXT;
+ANGLE_UTIL_EXPORT PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC glDrawRangeElementsBaseVertexEXT;
+ANGLE_UTIL_EXPORT PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC glMultiDrawElementsBaseVertexEXT;
 ANGLE_UTIL_EXPORT PFNGLFRAMEBUFFERTEXTUREEXTPROC glFramebufferTextureEXT;
 ANGLE_UTIL_EXPORT PFNGLDRAWARRAYSINSTANCEDEXTPROC glDrawArraysInstancedEXT;
 ANGLE_UTIL_EXPORT PFNGLDRAWELEMENTSINSTANCEDEXTPROC glDrawElementsInstancedEXT;
@@ -623,6 +627,9 @@ ANGLE_UTIL_EXPORT PFNGLTESTFENCENVPROC glTestFenceNV;
 ANGLE_UTIL_EXPORT PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC
     glEGLImageTargetRenderbufferStorageOES;
 ANGLE_UTIL_EXPORT PFNGLEGLIMAGETARGETTEXTURE2DOESPROC glEGLImageTargetTexture2DOES;
+ANGLE_UTIL_EXPORT PFNGLDRAWELEMENTSBASEVERTEXOESPROC glDrawElementsBaseVertexOES;
+ANGLE_UTIL_EXPORT PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC glDrawElementsInstancedBaseVertexOES;
+ANGLE_UTIL_EXPORT PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC glDrawRangeElementsBaseVertexOES;
 ANGLE_UTIL_EXPORT PFNGLGETPROGRAMBINARYOESPROC glGetProgramBinaryOES;
 ANGLE_UTIL_EXPORT PFNGLPROGRAMBINARYOESPROC glProgramBinaryOES;
 ANGLE_UTIL_EXPORT PFNGLGETBUFFERPOINTERVOESPROC glGetBufferPointervOES;
@@ -1358,6 +1365,14 @@ ANGLE_UTIL_EXPORT PFNGLGETQUERYIVEXTCONTEXTANGLEPROC glGetQueryivEXTContextANGLE
 ANGLE_UTIL_EXPORT PFNGLISQUERYEXTCONTEXTANGLEPROC glIsQueryEXTContextANGLE;
 ANGLE_UTIL_EXPORT PFNGLQUERYCOUNTEREXTCONTEXTANGLEPROC glQueryCounterEXTContextANGLE;
 ANGLE_UTIL_EXPORT PFNGLDRAWBUFFERSEXTCONTEXTANGLEPROC glDrawBuffersEXTContextANGLE;
+ANGLE_UTIL_EXPORT PFNGLDRAWELEMENTSBASEVERTEXEXTCONTEXTANGLEPROC
+    glDrawElementsBaseVertexEXTContextANGLE;
+ANGLE_UTIL_EXPORT PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTCONTEXTANGLEPROC
+    glDrawElementsInstancedBaseVertexEXTContextANGLE;
+ANGLE_UTIL_EXPORT PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTCONTEXTANGLEPROC
+    glDrawRangeElementsBaseVertexEXTContextANGLE;
+ANGLE_UTIL_EXPORT PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTCONTEXTANGLEPROC
+    glMultiDrawElementsBaseVertexEXTContextANGLE;
 ANGLE_UTIL_EXPORT PFNGLFRAMEBUFFERTEXTUREEXTCONTEXTANGLEPROC glFramebufferTextureEXTContextANGLE;
 ANGLE_UTIL_EXPORT PFNGLDRAWARRAYSINSTANCEDEXTCONTEXTANGLEPROC glDrawArraysInstancedEXTContextANGLE;
 ANGLE_UTIL_EXPORT PFNGLDRAWELEMENTSINSTANCEDEXTCONTEXTANGLEPROC
@@ -1430,6 +1445,12 @@ ANGLE_UTIL_EXPORT PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESCONTEXTANGLEPROC
     glEGLImageTargetRenderbufferStorageOESContextANGLE;
 ANGLE_UTIL_EXPORT PFNGLEGLIMAGETARGETTEXTURE2DOESCONTEXTANGLEPROC
     glEGLImageTargetTexture2DOESContextANGLE;
+ANGLE_UTIL_EXPORT PFNGLDRAWELEMENTSBASEVERTEXOESCONTEXTANGLEPROC
+    glDrawElementsBaseVertexOESContextANGLE;
+ANGLE_UTIL_EXPORT PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESCONTEXTANGLEPROC
+    glDrawElementsInstancedBaseVertexOESContextANGLE;
+ANGLE_UTIL_EXPORT PFNGLDRAWRANGEELEMENTSBASEVERTEXOESCONTEXTANGLEPROC
+    glDrawRangeElementsBaseVertexOESContextANGLE;
 ANGLE_UTIL_EXPORT PFNGLGETPROGRAMBINARYOESCONTEXTANGLEPROC glGetProgramBinaryOESContextANGLE;
 ANGLE_UTIL_EXPORT PFNGLPROGRAMBINARYOESCONTEXTANGLEPROC glProgramBinaryOESContextANGLE;
 ANGLE_UTIL_EXPORT PFNGLGETBUFFERPOINTERVOESCONTEXTANGLEPROC glGetBufferPointervOESContextANGLE;
@@ -2387,6 +2408,15 @@ void LoadGLES(LoadProc loadProc)
     glIsQueryEXT      = reinterpret_cast<PFNGLISQUERYEXTPROC>(loadProc("glIsQueryEXT"));
     glQueryCounterEXT = reinterpret_cast<PFNGLQUERYCOUNTEREXTPROC>(loadProc("glQueryCounterEXT"));
     glDrawBuffersEXT  = reinterpret_cast<PFNGLDRAWBUFFERSEXTPROC>(loadProc("glDrawBuffersEXT"));
+    glDrawElementsBaseVertexEXT = reinterpret_cast<PFNGLDRAWELEMENTSBASEVERTEXEXTPROC>(
+        loadProc("glDrawElementsBaseVertexEXT"));
+    glDrawElementsInstancedBaseVertexEXT =
+        reinterpret_cast<PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC>(
+            loadProc("glDrawElementsInstancedBaseVertexEXT"));
+    glDrawRangeElementsBaseVertexEXT = reinterpret_cast<PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC>(
+        loadProc("glDrawRangeElementsBaseVertexEXT"));
+    glMultiDrawElementsBaseVertexEXT = reinterpret_cast<PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC>(
+        loadProc("glMultiDrawElementsBaseVertexEXT"));
     glFramebufferTextureEXT =
         reinterpret_cast<PFNGLFRAMEBUFFERTEXTUREEXTPROC>(loadProc("glFramebufferTextureEXT"));
     glDrawArraysInstancedEXT =
@@ -2490,6 +2520,13 @@ void LoadGLES(LoadProc loadProc)
             loadProc("glEGLImageTargetRenderbufferStorageOES"));
     glEGLImageTargetTexture2DOES = reinterpret_cast<PFNGLEGLIMAGETARGETTEXTURE2DOESPROC>(
         loadProc("glEGLImageTargetTexture2DOES"));
+    glDrawElementsBaseVertexOES = reinterpret_cast<PFNGLDRAWELEMENTSBASEVERTEXOESPROC>(
+        loadProc("glDrawElementsBaseVertexOES"));
+    glDrawElementsInstancedBaseVertexOES =
+        reinterpret_cast<PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC>(
+            loadProc("glDrawElementsInstancedBaseVertexOES"));
+    glDrawRangeElementsBaseVertexOES = reinterpret_cast<PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC>(
+        loadProc("glDrawRangeElementsBaseVertexOES"));
     glGetProgramBinaryOES =
         reinterpret_cast<PFNGLGETPROGRAMBINARYOESPROC>(loadProc("glGetProgramBinaryOES"));
     glProgramBinaryOES =
@@ -3871,6 +3908,18 @@ void LoadGLES(LoadProc loadProc)
         loadProc("glQueryCounterEXTContextANGLE"));
     glDrawBuffersEXTContextANGLE = reinterpret_cast<PFNGLDRAWBUFFERSEXTCONTEXTANGLEPROC>(
         loadProc("glDrawBuffersEXTContextANGLE"));
+    glDrawElementsBaseVertexEXTContextANGLE =
+        reinterpret_cast<PFNGLDRAWELEMENTSBASEVERTEXEXTCONTEXTANGLEPROC>(
+            loadProc("glDrawElementsBaseVertexEXTContextANGLE"));
+    glDrawElementsInstancedBaseVertexEXTContextANGLE =
+        reinterpret_cast<PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTCONTEXTANGLEPROC>(
+            loadProc("glDrawElementsInstancedBaseVertexEXTContextANGLE"));
+    glDrawRangeElementsBaseVertexEXTContextANGLE =
+        reinterpret_cast<PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTCONTEXTANGLEPROC>(
+            loadProc("glDrawRangeElementsBaseVertexEXTContextANGLE"));
+    glMultiDrawElementsBaseVertexEXTContextANGLE =
+        reinterpret_cast<PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTCONTEXTANGLEPROC>(
+            loadProc("glMultiDrawElementsBaseVertexEXTContextANGLE"));
     glFramebufferTextureEXTContextANGLE =
         reinterpret_cast<PFNGLFRAMEBUFFERTEXTUREEXTCONTEXTANGLEPROC>(
             loadProc("glFramebufferTextureEXTContextANGLE"));
@@ -4011,6 +4060,15 @@ void LoadGLES(LoadProc loadProc)
     glEGLImageTargetTexture2DOESContextANGLE =
         reinterpret_cast<PFNGLEGLIMAGETARGETTEXTURE2DOESCONTEXTANGLEPROC>(
             loadProc("glEGLImageTargetTexture2DOESContextANGLE"));
+    glDrawElementsBaseVertexOESContextANGLE =
+        reinterpret_cast<PFNGLDRAWELEMENTSBASEVERTEXOESCONTEXTANGLEPROC>(
+            loadProc("glDrawElementsBaseVertexOESContextANGLE"));
+    glDrawElementsInstancedBaseVertexOESContextANGLE =
+        reinterpret_cast<PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESCONTEXTANGLEPROC>(
+            loadProc("glDrawElementsInstancedBaseVertexOESContextANGLE"));
+    glDrawRangeElementsBaseVertexOESContextANGLE =
+        reinterpret_cast<PFNGLDRAWRANGEELEMENTSBASEVERTEXOESCONTEXTANGLEPROC>(
+            loadProc("glDrawRangeElementsBaseVertexOESContextANGLE"));
     glGetProgramBinaryOESContextANGLE = reinterpret_cast<PFNGLGETPROGRAMBINARYOESCONTEXTANGLEPROC>(
         loadProc("glGetProgramBinaryOESContextANGLE"));
     glProgramBinaryOESContextANGLE = reinterpret_cast<PFNGLPROGRAMBINARYOESCONTEXTANGLEPROC>(
diff --git a/util/gles_loader_autogen.h b/util/gles_loader_autogen.h
index 68c69daf1..c26ea546c 100644
--- a/util/gles_loader_autogen.h
+++ b/util/gles_loader_autogen.h
@@ -593,6 +593,11 @@ ANGLE_UTIL_EXPORT extern PFNGLGETQUERYIVEXTPROC glGetQueryivEXT;
 ANGLE_UTIL_EXPORT extern PFNGLISQUERYEXTPROC glIsQueryEXT;
 ANGLE_UTIL_EXPORT extern PFNGLQUERYCOUNTEREXTPROC glQueryCounterEXT;
 ANGLE_UTIL_EXPORT extern PFNGLDRAWBUFFERSEXTPROC glDrawBuffersEXT;
+ANGLE_UTIL_EXPORT extern PFNGLDRAWELEMENTSBASEVERTEXEXTPROC glDrawElementsBaseVertexEXT;
+ANGLE_UTIL_EXPORT extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC
+    glDrawElementsInstancedBaseVertexEXT;
+ANGLE_UTIL_EXPORT extern PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC glDrawRangeElementsBaseVertexEXT;
+ANGLE_UTIL_EXPORT extern PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC glMultiDrawElementsBaseVertexEXT;
 ANGLE_UTIL_EXPORT extern PFNGLFRAMEBUFFERTEXTUREEXTPROC glFramebufferTextureEXT;
 ANGLE_UTIL_EXPORT extern PFNGLDRAWARRAYSINSTANCEDEXTPROC glDrawArraysInstancedEXT;
 ANGLE_UTIL_EXPORT extern PFNGLDRAWELEMENTSINSTANCEDEXTPROC glDrawElementsInstancedEXT;
@@ -653,6 +658,10 @@ ANGLE_UTIL_EXPORT extern PFNGLTESTFENCENVPROC glTestFenceNV;
 ANGLE_UTIL_EXPORT extern PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC
     glEGLImageTargetRenderbufferStorageOES;
 ANGLE_UTIL_EXPORT extern PFNGLEGLIMAGETARGETTEXTURE2DOESPROC glEGLImageTargetTexture2DOES;
+ANGLE_UTIL_EXPORT extern PFNGLDRAWELEMENTSBASEVERTEXOESPROC glDrawElementsBaseVertexOES;
+ANGLE_UTIL_EXPORT extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC
+    glDrawElementsInstancedBaseVertexOES;
+ANGLE_UTIL_EXPORT extern PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC glDrawRangeElementsBaseVertexOES;
 ANGLE_UTIL_EXPORT extern PFNGLGETPROGRAMBINARYOESPROC glGetProgramBinaryOES;
 ANGLE_UTIL_EXPORT extern PFNGLPROGRAMBINARYOESPROC glProgramBinaryOES;
 ANGLE_UTIL_EXPORT extern PFNGLGETBUFFERPOINTERVOESPROC glGetBufferPointervOES;
@@ -1449,6 +1458,14 @@ ANGLE_UTIL_EXPORT extern PFNGLGETQUERYIVEXTCONTEXTANGLEPROC glGetQueryivEXTConte
 ANGLE_UTIL_EXPORT extern PFNGLISQUERYEXTCONTEXTANGLEPROC glIsQueryEXTContextANGLE;
 ANGLE_UTIL_EXPORT extern PFNGLQUERYCOUNTEREXTCONTEXTANGLEPROC glQueryCounterEXTContextANGLE;
 ANGLE_UTIL_EXPORT extern PFNGLDRAWBUFFERSEXTCONTEXTANGLEPROC glDrawBuffersEXTContextANGLE;
+ANGLE_UTIL_EXPORT extern PFNGLDRAWELEMENTSBASEVERTEXEXTCONTEXTANGLEPROC
+    glDrawElementsBaseVertexEXTContextANGLE;
+ANGLE_UTIL_EXPORT extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTCONTEXTANGLEPROC
+    glDrawElementsInstancedBaseVertexEXTContextANGLE;
+ANGLE_UTIL_EXPORT extern PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTCONTEXTANGLEPROC
+    glDrawRangeElementsBaseVertexEXTContextANGLE;
+ANGLE_UTIL_EXPORT extern PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTCONTEXTANGLEPROC
+    glMultiDrawElementsBaseVertexEXTContextANGLE;
 ANGLE_UTIL_EXPORT extern PFNGLFRAMEBUFFERTEXTUREEXTCONTEXTANGLEPROC
     glFramebufferTextureEXTContextANGLE;
 ANGLE_UTIL_EXPORT extern PFNGLDRAWARRAYSINSTANCEDEXTCONTEXTANGLEPROC
@@ -1532,6 +1549,12 @@ ANGLE_UTIL_EXPORT extern PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESCONTEXTANGLEPR
     glEGLImageTargetRenderbufferStorageOESContextANGLE;
 ANGLE_UTIL_EXPORT extern PFNGLEGLIMAGETARGETTEXTURE2DOESCONTEXTANGLEPROC
     glEGLImageTargetTexture2DOESContextANGLE;
+ANGLE_UTIL_EXPORT extern PFNGLDRAWELEMENTSBASEVERTEXOESCONTEXTANGLEPROC
+    glDrawElementsBaseVertexOESContextANGLE;
+ANGLE_UTIL_EXPORT extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESCONTEXTANGLEPROC
+    glDrawElementsInstancedBaseVertexOESContextANGLE;
+ANGLE_UTIL_EXPORT extern PFNGLDRAWRANGEELEMENTSBASEVERTEXOESCONTEXTANGLEPROC
+    glDrawRangeElementsBaseVertexOESContextANGLE;
 ANGLE_UTIL_EXPORT extern PFNGLGETPROGRAMBINARYOESCONTEXTANGLEPROC glGetProgramBinaryOESContextANGLE;
 ANGLE_UTIL_EXPORT extern PFNGLPROGRAMBINARYOESCONTEXTANGLEPROC glProgramBinaryOESContextANGLE;
 ANGLE_UTIL_EXPORT extern PFNGLGETBUFFERPOINTERVOESCONTEXTANGLEPROC
-- 
2.21.0

