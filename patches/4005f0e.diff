From 4005f0ef29bc8437759bd904dbf6ce9fe954eec6 Mon Sep 17 00:00:00 2001
From: Shahbaz Youssefi <syoussefi@chromium.org>
Date: Thu, 09 Jan 2020 14:22:35 -0500
Subject: [PATCH] Vulkan: fix default uniform descriptor rebind on program change

When the program binding changes, we set the descriptor sets binding
dirty bit if the program had any textures, UBOs, SSBOs, images or atomic
counters.  The check for default uniforms was missing.  So if the two
programs had no resources and were only using default uniforms, then
drawing with one after the other didn't update the descriptor set
binding of the default uniforms for the second draw.

Bug: angleproject:None
Change-Id: I631a1619658ee713484cfaee99fe1e39987e16e7
---

diff --git a/src/libANGLE/Program.cpp b/src/libANGLE/Program.cpp
index 76881c9..b69aceb 100644
--- a/src/libANGLE/Program.cpp
+++ b/src/libANGLE/Program.cpp
@@ -1059,6 +1059,7 @@
       mAttachedShaders{},
       mTransformFeedbackBufferMode(GL_INTERLEAVED_ATTRIBS),
       mMaxActiveAttribLocation(0),
+      mDefaultUniformRange(0, 0),
       mSamplerUniformRange(0, 0),
       mImageUniformRange(0, 0),
       mAtomicCounterUniformRange(0, 0),
@@ -3613,6 +3614,9 @@
         SamplerFormat format       = samplerUniform.typeInfo->samplerFormat;
         mState.mSamplerBindings.emplace_back(textureType, format, elementCount, false);
     }
+
+    // Whatever is left constitutes the default uniforms.
+    mState.mDefaultUniformRange = RangeUI(0, low);
 }
 
 bool Program::linkAtomicCounterBuffers()
@@ -5149,6 +5153,9 @@
     stream.writeInt(static_cast<int>(mState.mDrawBufferTypeMask.to_ulong()));
     stream.writeInt(static_cast<int>(mState.mActiveOutputVariables.to_ulong()));
 
+    stream.writeInt(mState.getDefaultUniformRange().low());
+    stream.writeInt(mState.getDefaultUniformRange().high());
+
     stream.writeInt(mState.getSamplerUniformRange().low());
     stream.writeInt(mState.getSamplerUniformRange().high());
 
@@ -5387,6 +5394,10 @@
     mState.mDrawBufferTypeMask    = gl::ComponentTypeMask(stream.readInt<uint32_t>());
     mState.mActiveOutputVariables = stream.readInt<gl::DrawBufferMask>();
 
+    unsigned int defaultUniformRangeLow  = stream.readInt<unsigned int>();
+    unsigned int defaultUniformRangeHigh = stream.readInt<unsigned int>();
+    mState.mDefaultUniformRange          = RangeUI(defaultUniformRangeLow, defaultUniformRangeHigh);
+
     unsigned int samplerRangeLow  = stream.readInt<unsigned int>();
     unsigned int samplerRangeHigh = stream.readInt<unsigned int>();
     mState.mSamplerUniformRange   = RangeUI(samplerRangeLow, samplerRangeHigh);
diff --git a/src/libANGLE/Program.h b/src/libANGLE/Program.h
index 23319da..08e5b78 100644
--- a/src/libANGLE/Program.h
+++ b/src/libANGLE/Program.h
@@ -346,6 +346,7 @@
     const std::vector<SamplerBinding> &getSamplerBindings() const { return mSamplerBindings; }
     const std::vector<ImageBinding> &getImageBindings() const { return mImageBindings; }
     const sh::WorkGroupSize &getComputeShaderLocalSize() const { return mComputeShaderLocalSize; }
+    const RangeUI &getDefaultUniformRange() const { return mDefaultUniformRange; }
     const RangeUI &getSamplerUniformRange() const { return mSamplerUniformRange; }
     const RangeUI &getImageUniformRange() const { return mImageUniformRange; }
     const RangeUI &getAtomicCounterUniformRange() const { return mAtomicCounterUniformRange; }
@@ -455,6 +456,7 @@
     std::vector<BufferVariable> mBufferVariables;
     std::vector<InterfaceBlock> mShaderStorageBlocks;
     std::vector<AtomicCounterBuffer> mAtomicCounterBuffers;
+    RangeUI mDefaultUniformRange;
     RangeUI mSamplerUniformRange;
     RangeUI mImageUniformRange;
     RangeUI mAtomicCounterUniformRange;
diff --git a/src/libANGLE/renderer/vulkan/ContextVk.cpp b/src/libANGLE/renderer/vulkan/ContextVk.cpp
index e5e9a93..12b14c4 100644
--- a/src/libANGLE/renderer/vulkan/ContextVk.cpp
+++ b/src/libANGLE/renderer/vulkan/ContextVk.cpp
@@ -2438,6 +2438,7 @@
                 break;
             case gl::State::DIRTY_BIT_PROGRAM_EXECUTABLE:
             {
+                invalidateCurrentDefaultUniforms();
                 invalidateCurrentTextures();
                 invalidateCurrentShaderResources();
                 if (glState.getProgram()->isCompute())
@@ -2689,6 +2690,16 @@
     return new OverlayVk(state);
 }
 
+void ContextVk::invalidateCurrentDefaultUniforms()
+{
+    ASSERT(mProgram);
+    if (mProgram->hasDefaultUniforms())
+    {
+        mGraphicsDirtyBits.set(DIRTY_BIT_DESCRIPTOR_SETS);
+        mComputeDirtyBits.set(DIRTY_BIT_DESCRIPTOR_SETS);
+    }
+}
+
 void ContextVk::invalidateCurrentTextures()
 {
     ASSERT(mProgram);
diff --git a/src/libANGLE/renderer/vulkan/ContextVk.h b/src/libANGLE/renderer/vulkan/ContextVk.h
index 538ed2a..eee7192 100644
--- a/src/libANGLE/renderer/vulkan/ContextVk.h
+++ b/src/libANGLE/renderer/vulkan/ContextVk.h
@@ -585,6 +585,7 @@
         mCurrentComputePipeline = nullptr;
     }
 
+    void invalidateCurrentDefaultUniforms();
     void invalidateCurrentTextures();
     void invalidateCurrentShaderResources();
     void invalidateGraphicsDriverUniforms();
diff --git a/src/libANGLE/renderer/vulkan/ProgramVk.h b/src/libANGLE/renderer/vulkan/ProgramVk.h
index 3132a38..05c6e58 100644
--- a/src/libANGLE/renderer/vulkan/ProgramVk.h
+++ b/src/libANGLE/renderer/vulkan/ProgramVk.h
@@ -119,6 +119,7 @@
 
     const vk::PipelineLayout &getPipelineLayout() const { return mPipelineLayout.get(); }
 
+    bool hasDefaultUniforms() const { return !mState.getDefaultUniformRange().empty(); }
     bool hasTextures() const { return !mState.getSamplerBindings().empty(); }
     bool hasUniformBuffers() const { return !mState.getUniformBlocks().empty(); }
     bool hasStorageBuffers() const { return !mState.getShaderStorageBlocks().empty(); }
